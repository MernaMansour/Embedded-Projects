
ADC temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000c74  00000d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800066  00800066  00000d0e  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00002848  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d95  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e4  00000000  00000000  000036fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000740  00000000  00000000  00003ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00004224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d1  00000000  00000000  00004444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000798  00000000  00000000  00004715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  8a:	0c 94 38 06 	jmp	0xc70	; 0xc70 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
#include <avr/io.h>
#include "macro.h"

void ADC_init(void)
{
	SET_BIT(ADMUX,REFS0); //reference voltage ---AVCC=5v
  92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
  94:	3f 9a       	sbi	0x07, 7	; 7
	SET_BIT(ADCSRA,ADEN);//enable adc
  96:	37 9a       	sbi	0x06, 7	; 6
	SET_BIT(ADCSRA,ADPS2);
  98:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);// division factor 64 --> frequency 125KHZ
  9a:	31 9a       	sbi	0x06, 1	; 6
	
}
  9c:	08 95       	ret

0000009e <ADC_read>:
unsigned short ADC_read(void)
{
	unsigned short read_val;
	SET_BIT(ADCSRA,ADSC);
  9e:	36 9a       	sbi	0x06, 6	; 6
	while(READ_BIT(ADCSRA,ADIF)==0);
  a0:	34 9b       	sbis	0x06, 4	; 6
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <ADC_read+0x2>
	//while(IS_BIT_CLR(ADCSRA,ADIF));// if bit ADIF=0 ---> condition is true ...> return 1 till it becomes 1 it exist from loop
	SET_BIT(ADCSRA,ADIF);//clear bit
  a4:	34 9a       	sbi	0x06, 4	; 6
	read_val=(ADCL);
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);
  aa:	45 b1       	in	r20, 0x05	; 5
  ac:	34 2f       	mov	r19, r20
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	82 2b       	or	r24, r18
  b2:	93 2b       	or	r25, r19
	return read_val; 
  b4:	08 95       	ret

000000b6 <main>:
char read_val;
unsigned short temp;

int main(void)
{
	LCD_INIT();
  b6:	0e 94 83 04 	call	0x906	; 0x906 <LCD_INIT>
	ADC_init();
  ba:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	LCD_SEND_STRING("temp=");
  be:	80 e6       	ldi	r24, 0x60	; 96
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <LCD_SEND_STRING>
	buzzer_init('A',5);
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	65 e0       	ldi	r22, 0x05	; 5
  ca:	0e 94 c5 00 	call	0x18a	; 0x18a <buzzer_init>
        temp=(ADC_read()*0.25);
		if(temp<10)
		{
			LCD_MOVE_CURSOR(1,6);
			LCD_SEND_CHAR(0x30);// ascii code of zero
			LCD_SEND_CHAR(temp+48);
  ce:	06 e6       	ldi	r16, 0x66	; 102
  d0:	10 e0       	ldi	r17, 0x00	; 0
			LCD_SEND_CHAR('c'); 
		}	
		else if (temp<100)
		{
			LCD_MOVE_CURSOR(1,6);
			LCD_SEND_CHAR((temp/10)+48);
  d2:	ca e0       	ldi	r28, 0x0A	; 10
  d4:	d0 e0       	ldi	r29, 0x00	; 0
	ADC_init();
	LCD_SEND_STRING("temp=");
	buzzer_init('A',5);
    while(1)
    {
        temp=(ADC_read()*0.25);
  d6:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_read>
  da:	bc 01       	movw	r22, r24
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 33 05 	call	0xa66	; 0xa66 <__floatunsisf>
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	40 e8       	ldi	r20, 0x80	; 128
  ea:	5e e3       	ldi	r21, 0x3E	; 62
  ec:	0e 94 99 05 	call	0xb32	; 0xb32 <__mulsf3>
  f0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
  f4:	ab 01       	movw	r20, r22
  f6:	bc 01       	movw	r22, r24
  f8:	50 93 67 00 	sts	0x0067, r21
  fc:	40 93 66 00 	sts	0x0066, r20
		if(temp<10)
 100:	4a 30       	cpi	r20, 0x0A	; 10
 102:	51 05       	cpc	r21, r1
 104:	98 f4       	brcc	.+38     	; 0x12c <main+0x76>
		{
			LCD_MOVE_CURSOR(1,6);
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	66 e0       	ldi	r22, 0x06	; 6
 10a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_MOVE_CURSOR>
			LCD_SEND_CHAR(0x30);// ascii code of zero
 10e:	80 e3       	ldi	r24, 0x30	; 48
 110:	0e 94 44 04 	call	0x888	; 0x888 <LCD_SEND_CHAR>
			LCD_SEND_CHAR(temp+48);
 114:	f8 01       	movw	r30, r16
 116:	80 81       	ld	r24, Z
 118:	80 5d       	subi	r24, 0xD0	; 208
 11a:	0e 94 44 04 	call	0x888	; 0x888 <LCD_SEND_CHAR>
			LCD_SEND_CHAR(0xDF);
 11e:	8f ed       	ldi	r24, 0xDF	; 223
 120:	0e 94 44 04 	call	0x888	; 0x888 <LCD_SEND_CHAR>
			LCD_SEND_CHAR('c'); 
 124:	83 e6       	ldi	r24, 0x63	; 99
 126:	0e 94 44 04 	call	0x888	; 0x888 <LCD_SEND_CHAR>
 12a:	22 c0       	rjmp	.+68     	; 0x170 <main+0xba>
		}	
		else if (temp<100)
 12c:	44 36       	cpi	r20, 0x64	; 100
 12e:	51 05       	cpc	r21, r1
 130:	f8 f4       	brcc	.+62     	; 0x170 <main+0xba>
		{
			LCD_MOVE_CURSOR(1,6);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	66 e0       	ldi	r22, 0x06	; 6
 136:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_MOVE_CURSOR>
			LCD_SEND_CHAR((temp/10)+48);
 13a:	80 91 66 00 	lds	r24, 0x0066
 13e:	90 91 67 00 	lds	r25, 0x0067
 142:	be 01       	movw	r22, r28
 144:	0e 94 24 06 	call	0xc48	; 0xc48 <__udivmodhi4>
 148:	86 2f       	mov	r24, r22
 14a:	80 5d       	subi	r24, 0xD0	; 208
 14c:	0e 94 44 04 	call	0x888	; 0x888 <LCD_SEND_CHAR>
			LCD_SEND_CHAR((temp%10)+48);
 150:	80 91 66 00 	lds	r24, 0x0066
 154:	90 91 67 00 	lds	r25, 0x0067
 158:	be 01       	movw	r22, r28
 15a:	0e 94 24 06 	call	0xc48	; 0xc48 <__udivmodhi4>
 15e:	80 5d       	subi	r24, 0xD0	; 208
 160:	0e 94 44 04 	call	0x888	; 0x888 <LCD_SEND_CHAR>
			LCD_SEND_CHAR(0xDF);
 164:	8f ed       	ldi	r24, 0xDF	; 223
 166:	0e 94 44 04 	call	0x888	; 0x888 <LCD_SEND_CHAR>
			LCD_SEND_CHAR('c');
 16a:	83 e6       	ldi	r24, 0x63	; 99
 16c:	0e 94 44 04 	call	0x888	; 0x888 <LCD_SEND_CHAR>
		}	
		else
		{
		}	
		if(temp>70)
 170:	80 91 66 00 	lds	r24, 0x0066
 174:	90 91 67 00 	lds	r25, 0x0067
 178:	87 34       	cpi	r24, 0x47	; 71
 17a:	91 05       	cpc	r25, r1
 17c:	08 f4       	brcc	.+2      	; 0x180 <main+0xca>
 17e:	ab cf       	rjmp	.-170    	; 0xd6 <main+0x20>
		{ 
			buzzer_on('A',5);
 180:	81 e4       	ldi	r24, 0x41	; 65
 182:	65 e0       	ldi	r22, 0x05	; 5
 184:	0e 94 c9 00 	call	0x192	; 0x192 <buzzer_on>
 188:	a6 cf       	rjmp	.-180    	; 0xd6 <main+0x20>

0000018a <buzzer_init>:
#include <avr/io.h>
#include "DIO.h"
#include "buzzer.h"
void buzzer_init(char port, char pin)
{
	DIO_SET_PIN_DIR(port,pin,1);
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SET_PIN_DIR>
}
 190:	08 95       	ret

00000192 <buzzer_on>:
void buzzer_on(char port,char pin)
{
	DIO_WRITE_PIN(port,pin,1);
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_WRITE_PIN>
}
 198:	08 95       	ret

0000019a <buzzer_off>:
void buzzer_off(char port,char pin)
{
	DIO_WRITE_PIN(port,pin,0);
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_WRITE_PIN>
}
 1a0:	08 95       	ret

000001a2 <buzzer_toggle>:
void buzzer_toggle(char port,char pin)
{
	DIO_TOGGLE_PIN(port,pin);
 1a2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_TOGGLE_PIN>
}
 1a6:	08 95       	ret

000001a8 <buzzer_read_status>:
char buzzer_read_status(char port,char pin)
{
	return DIO_READ_PIN(port,pin);
 1a8:	0e 94 46 02 	call	0x48c	; 0x48c <DIO_READ_PIN>
 1ac:	08 95       	ret

000001ae <DIO_SET_PIN_DIR>:
#include "macro.h"


void DIO_SET_PIN_DIR(char port, char pin, char dir)
{
	switch(port)
 1ae:	84 34       	cpi	r24, 0x44	; 68
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <DIO_SET_PIN_DIR+0x6>
 1b2:	71 c0       	rjmp	.+226    	; 0x296 <DIO_SET_PIN_DIR+0xe8>
 1b4:	85 34       	cpi	r24, 0x45	; 69
 1b6:	48 f4       	brcc	.+18     	; 0x1ca <DIO_SET_PIN_DIR+0x1c>
 1b8:	82 34       	cpi	r24, 0x42	; 66
 1ba:	99 f1       	breq	.+102    	; 0x222 <DIO_SET_PIN_DIR+0x74>
 1bc:	83 34       	cpi	r24, 0x43	; 67
 1be:	08 f0       	brcs	.+2      	; 0x1c2 <DIO_SET_PIN_DIR+0x14>
 1c0:	4d c0       	rjmp	.+154    	; 0x25c <DIO_SET_PIN_DIR+0xae>
 1c2:	81 34       	cpi	r24, 0x41	; 65
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <DIO_SET_PIN_DIR+0x1a>
 1c6:	83 c0       	rjmp	.+262    	; 0x2ce <DIO_SET_PIN_DIR+0x120>
 1c8:	0f c0       	rjmp	.+30     	; 0x1e8 <DIO_SET_PIN_DIR+0x3a>
 1ca:	82 36       	cpi	r24, 0x62	; 98
 1cc:	51 f1       	breq	.+84     	; 0x222 <DIO_SET_PIN_DIR+0x74>
 1ce:	83 36       	cpi	r24, 0x63	; 99
 1d0:	20 f4       	brcc	.+8      	; 0x1da <DIO_SET_PIN_DIR+0x2c>
 1d2:	81 36       	cpi	r24, 0x61	; 97
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <DIO_SET_PIN_DIR+0x2a>
 1d6:	7b c0       	rjmp	.+246    	; 0x2ce <DIO_SET_PIN_DIR+0x120>
 1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <DIO_SET_PIN_DIR+0x3a>
 1da:	83 36       	cpi	r24, 0x63	; 99
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <DIO_SET_PIN_DIR+0x32>
 1de:	3e c0       	rjmp	.+124    	; 0x25c <DIO_SET_PIN_DIR+0xae>
 1e0:	84 36       	cpi	r24, 0x64	; 100
 1e2:	09 f0       	breq	.+2      	; 0x1e6 <DIO_SET_PIN_DIR+0x38>
 1e4:	74 c0       	rjmp	.+232    	; 0x2ce <DIO_SET_PIN_DIR+0x120>
 1e6:	57 c0       	rjmp	.+174    	; 0x296 <DIO_SET_PIN_DIR+0xe8>
	{
		case'A':
		case'a':
		if(dir==1)
 1e8:	41 30       	cpi	r20, 0x01	; 1
 1ea:	69 f4       	brne	.+26     	; 0x206 <DIO_SET_PIN_DIR+0x58>
		{
			SET_BIT(DDRA,pin);
 1ec:	2a b3       	in	r18, 0x1a	; 26
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	ac 01       	movw	r20, r24
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SET_PIN_DIR+0x4c>
 1f6:	44 0f       	add	r20, r20
 1f8:	55 1f       	adc	r21, r21
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SET_PIN_DIR+0x48>
 1fe:	ba 01       	movw	r22, r20
 200:	62 2b       	or	r22, r18
 202:	6a bb       	out	0x1a, r22	; 26
 204:	08 95       	ret

        }
		else
		{
			CLR_BIT(DDRA,pin);
 206:	2a b3       	in	r18, 0x1a	; 26
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	ac 01       	movw	r20, r24
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_SET_PIN_DIR+0x66>
 210:	44 0f       	add	r20, r20
 212:	55 1f       	adc	r21, r21
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_SET_PIN_DIR+0x62>
 218:	ba 01       	movw	r22, r20
 21a:	60 95       	com	r22
 21c:	62 23       	and	r22, r18
 21e:	6a bb       	out	0x1a, r22	; 26
 220:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(dir==1)
 222:	41 30       	cpi	r20, 0x01	; 1
 224:	69 f4       	brne	.+26     	; 0x240 <DIO_SET_PIN_DIR+0x92>
		{
			SET_BIT(DDRB,pin);
 226:	27 b3       	in	r18, 0x17	; 23
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	ac 01       	movw	r20, r24
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_SET_PIN_DIR+0x86>
 230:	44 0f       	add	r20, r20
 232:	55 1f       	adc	r21, r21
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_SET_PIN_DIR+0x82>
 238:	ba 01       	movw	r22, r20
 23a:	62 2b       	or	r22, r18
 23c:	67 bb       	out	0x17, r22	; 23
 23e:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRB,pin);
 240:	27 b3       	in	r18, 0x17	; 23
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	ac 01       	movw	r20, r24
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_SET_PIN_DIR+0xa0>
 24a:	44 0f       	add	r20, r20
 24c:	55 1f       	adc	r21, r21
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_SET_PIN_DIR+0x9c>
 252:	ba 01       	movw	r22, r20
 254:	60 95       	com	r22
 256:	62 23       	and	r22, r18
 258:	67 bb       	out	0x17, r22	; 23
 25a:	08 95       	ret
		}
		break;	
		case'C':
		case'c':
		if(dir==1)
 25c:	41 30       	cpi	r20, 0x01	; 1
 25e:	69 f4       	brne	.+26     	; 0x27a <DIO_SET_PIN_DIR+0xcc>
		{
			SET_BIT(DDRC,pin);
 260:	24 b3       	in	r18, 0x14	; 20
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	ac 01       	movw	r20, r24
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_SET_PIN_DIR+0xc0>
 26a:	44 0f       	add	r20, r20
 26c:	55 1f       	adc	r21, r21
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_SET_PIN_DIR+0xbc>
 272:	ba 01       	movw	r22, r20
 274:	62 2b       	or	r22, r18
 276:	64 bb       	out	0x14, r22	; 20
 278:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRC,pin);
 27a:	24 b3       	in	r18, 0x14	; 20
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	ac 01       	movw	r20, r24
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_SET_PIN_DIR+0xda>
 284:	44 0f       	add	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_SET_PIN_DIR+0xd6>
 28c:	ba 01       	movw	r22, r20
 28e:	60 95       	com	r22
 290:	62 23       	and	r22, r18
 292:	64 bb       	out	0x14, r22	; 20
 294:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(dir==1)
 296:	41 30       	cpi	r20, 0x01	; 1
 298:	69 f4       	brne	.+26     	; 0x2b4 <DIO_SET_PIN_DIR+0x106>
		{
			SET_BIT(DDRD,pin);
 29a:	21 b3       	in	r18, 0x11	; 17
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	ac 01       	movw	r20, r24
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_SET_PIN_DIR+0xfa>
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_SET_PIN_DIR+0xf6>
 2ac:	ba 01       	movw	r22, r20
 2ae:	62 2b       	or	r22, r18
 2b0:	61 bb       	out	0x11, r22	; 17
 2b2:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRD,pin);
 2b4:	21 b3       	in	r18, 0x11	; 17
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	ac 01       	movw	r20, r24
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_SET_PIN_DIR+0x114>
 2be:	44 0f       	add	r20, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_SET_PIN_DIR+0x110>
 2c6:	ba 01       	movw	r22, r20
 2c8:	60 95       	com	r22
 2ca:	62 23       	and	r22, r18
 2cc:	61 bb       	out	0x11, r22	; 17
 2ce:	08 95       	ret

000002d0 <DIO_WRITE_PIN>:
		break;
	}
}
void DIO_WRITE_PIN(char port,char pin, char val)
{
	switch(port)
 2d0:	84 34       	cpi	r24, 0x44	; 68
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <DIO_WRITE_PIN+0x6>
 2d4:	71 c0       	rjmp	.+226    	; 0x3b8 <DIO_WRITE_PIN+0xe8>
 2d6:	85 34       	cpi	r24, 0x45	; 69
 2d8:	48 f4       	brcc	.+18     	; 0x2ec <DIO_WRITE_PIN+0x1c>
 2da:	82 34       	cpi	r24, 0x42	; 66
 2dc:	99 f1       	breq	.+102    	; 0x344 <DIO_WRITE_PIN+0x74>
 2de:	83 34       	cpi	r24, 0x43	; 67
 2e0:	08 f0       	brcs	.+2      	; 0x2e4 <DIO_WRITE_PIN+0x14>
 2e2:	4d c0       	rjmp	.+154    	; 0x37e <DIO_WRITE_PIN+0xae>
 2e4:	81 34       	cpi	r24, 0x41	; 65
 2e6:	09 f0       	breq	.+2      	; 0x2ea <DIO_WRITE_PIN+0x1a>
 2e8:	83 c0       	rjmp	.+262    	; 0x3f0 <DIO_WRITE_PIN+0x120>
 2ea:	0f c0       	rjmp	.+30     	; 0x30a <DIO_WRITE_PIN+0x3a>
 2ec:	82 36       	cpi	r24, 0x62	; 98
 2ee:	51 f1       	breq	.+84     	; 0x344 <DIO_WRITE_PIN+0x74>
 2f0:	83 36       	cpi	r24, 0x63	; 99
 2f2:	20 f4       	brcc	.+8      	; 0x2fc <DIO_WRITE_PIN+0x2c>
 2f4:	81 36       	cpi	r24, 0x61	; 97
 2f6:	09 f0       	breq	.+2      	; 0x2fa <DIO_WRITE_PIN+0x2a>
 2f8:	7b c0       	rjmp	.+246    	; 0x3f0 <DIO_WRITE_PIN+0x120>
 2fa:	07 c0       	rjmp	.+14     	; 0x30a <DIO_WRITE_PIN+0x3a>
 2fc:	83 36       	cpi	r24, 0x63	; 99
 2fe:	09 f4       	brne	.+2      	; 0x302 <DIO_WRITE_PIN+0x32>
 300:	3e c0       	rjmp	.+124    	; 0x37e <DIO_WRITE_PIN+0xae>
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	09 f0       	breq	.+2      	; 0x308 <DIO_WRITE_PIN+0x38>
 306:	74 c0       	rjmp	.+232    	; 0x3f0 <DIO_WRITE_PIN+0x120>
 308:	57 c0       	rjmp	.+174    	; 0x3b8 <DIO_WRITE_PIN+0xe8>
	{
		case'A':
		case'a':
		if(val==1)
 30a:	41 30       	cpi	r20, 0x01	; 1
 30c:	69 f4       	brne	.+26     	; 0x328 <DIO_WRITE_PIN+0x58>
		{
			SET_BIT(PORTA,pin);
 30e:	2b b3       	in	r18, 0x1b	; 27
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	ac 01       	movw	r20, r24
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_WRITE_PIN+0x4c>
 318:	44 0f       	add	r20, r20
 31a:	55 1f       	adc	r21, r21
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_WRITE_PIN+0x48>
 320:	ba 01       	movw	r22, r20
 322:	62 2b       	or	r22, r18
 324:	6b bb       	out	0x1b, r22	; 27
 326:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 328:	2b b3       	in	r18, 0x1b	; 27
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	ac 01       	movw	r20, r24
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_WRITE_PIN+0x66>
 332:	44 0f       	add	r20, r20
 334:	55 1f       	adc	r21, r21
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_WRITE_PIN+0x62>
 33a:	ba 01       	movw	r22, r20
 33c:	60 95       	com	r22
 33e:	62 23       	and	r22, r18
 340:	6b bb       	out	0x1b, r22	; 27
 342:	08 95       	ret
		}
		break;	
			case'B':
			case'b':
			if(val==1)
 344:	41 30       	cpi	r20, 0x01	; 1
 346:	69 f4       	brne	.+26     	; 0x362 <DIO_WRITE_PIN+0x92>
			{
				SET_BIT(PORTB,pin);
 348:	28 b3       	in	r18, 0x18	; 24
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	ac 01       	movw	r20, r24
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_WRITE_PIN+0x86>
 352:	44 0f       	add	r20, r20
 354:	55 1f       	adc	r21, r21
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_WRITE_PIN+0x82>
 35a:	ba 01       	movw	r22, r20
 35c:	62 2b       	or	r22, r18
 35e:	68 bb       	out	0x18, r22	; 24
 360:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,pin);
 362:	28 b3       	in	r18, 0x18	; 24
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	ac 01       	movw	r20, r24
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_WRITE_PIN+0xa0>
 36c:	44 0f       	add	r20, r20
 36e:	55 1f       	adc	r21, r21
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_WRITE_PIN+0x9c>
 374:	ba 01       	movw	r22, r20
 376:	60 95       	com	r22
 378:	62 23       	and	r22, r18
 37a:	68 bb       	out	0x18, r22	; 24
 37c:	08 95       	ret
			}
			break;	
			case'C':
			case'c':
			if(val==1)
 37e:	41 30       	cpi	r20, 0x01	; 1
 380:	69 f4       	brne	.+26     	; 0x39c <DIO_WRITE_PIN+0xcc>
			{
				SET_BIT(PORTC,pin);
 382:	25 b3       	in	r18, 0x15	; 21
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	ac 01       	movw	r20, r24
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_WRITE_PIN+0xc0>
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_WRITE_PIN+0xbc>
 394:	ba 01       	movw	r22, r20
 396:	62 2b       	or	r22, r18
 398:	65 bb       	out	0x15, r22	; 21
 39a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,pin);
 39c:	25 b3       	in	r18, 0x15	; 21
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	ac 01       	movw	r20, r24
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_WRITE_PIN+0xda>
 3a6:	44 0f       	add	r20, r20
 3a8:	55 1f       	adc	r21, r21
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_WRITE_PIN+0xd6>
 3ae:	ba 01       	movw	r22, r20
 3b0:	60 95       	com	r22
 3b2:	62 23       	and	r22, r18
 3b4:	65 bb       	out	0x15, r22	; 21
 3b6:	08 95       	ret
			}
			break;	
				case'D':
				case'd':
				if(val==1)
 3b8:	41 30       	cpi	r20, 0x01	; 1
 3ba:	69 f4       	brne	.+26     	; 0x3d6 <DIO_WRITE_PIN+0x106>
				{
					SET_BIT(PORTD,pin);
 3bc:	22 b3       	in	r18, 0x12	; 18
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	ac 01       	movw	r20, r24
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_WRITE_PIN+0xfa>
 3c6:	44 0f       	add	r20, r20
 3c8:	55 1f       	adc	r21, r21
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_WRITE_PIN+0xf6>
 3ce:	ba 01       	movw	r22, r20
 3d0:	62 2b       	or	r22, r18
 3d2:	62 bb       	out	0x12, r22	; 18
 3d4:	08 95       	ret
				}
				else
				{
					CLR_BIT(PORTD,pin);
 3d6:	22 b3       	in	r18, 0x12	; 18
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	ac 01       	movw	r20, r24
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_WRITE_PIN+0x114>
 3e0:	44 0f       	add	r20, r20
 3e2:	55 1f       	adc	r21, r21
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_WRITE_PIN+0x110>
 3e8:	ba 01       	movw	r22, r20
 3ea:	60 95       	com	r22
 3ec:	62 23       	and	r22, r18
 3ee:	62 bb       	out	0x12, r22	; 18
 3f0:	08 95       	ret

000003f2 <DIO_TOGGLE_PIN>:
				break;
	}
}					
void DIO_TOGGLE_PIN(char port,char pin)
{
	switch(port)
 3f2:	84 34       	cpi	r24, 0x44	; 68
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <DIO_TOGGLE_PIN+0x6>
 3f6:	3d c0       	rjmp	.+122    	; 0x472 <DIO_TOGGLE_PIN+0x80>
 3f8:	85 34       	cpi	r24, 0x45	; 69
 3fa:	40 f4       	brcc	.+16     	; 0x40c <DIO_TOGGLE_PIN+0x1a>
 3fc:	82 34       	cpi	r24, 0x42	; 66
 3fe:	f9 f0       	breq	.+62     	; 0x43e <DIO_TOGGLE_PIN+0x4c>
 400:	83 34       	cpi	r24, 0x43	; 67
 402:	50 f5       	brcc	.+84     	; 0x458 <DIO_TOGGLE_PIN+0x66>
 404:	81 34       	cpi	r24, 0x41	; 65
 406:	09 f0       	breq	.+2      	; 0x40a <DIO_TOGGLE_PIN+0x18>
 408:	40 c0       	rjmp	.+128    	; 0x48a <DIO_TOGGLE_PIN+0x98>
 40a:	0c c0       	rjmp	.+24     	; 0x424 <DIO_TOGGLE_PIN+0x32>
 40c:	82 36       	cpi	r24, 0x62	; 98
 40e:	b9 f0       	breq	.+46     	; 0x43e <DIO_TOGGLE_PIN+0x4c>
 410:	83 36       	cpi	r24, 0x63	; 99
 412:	18 f4       	brcc	.+6      	; 0x41a <DIO_TOGGLE_PIN+0x28>
 414:	81 36       	cpi	r24, 0x61	; 97
 416:	c9 f5       	brne	.+114    	; 0x48a <DIO_TOGGLE_PIN+0x98>
 418:	05 c0       	rjmp	.+10     	; 0x424 <DIO_TOGGLE_PIN+0x32>
 41a:	83 36       	cpi	r24, 0x63	; 99
 41c:	e9 f0       	breq	.+58     	; 0x458 <DIO_TOGGLE_PIN+0x66>
 41e:	84 36       	cpi	r24, 0x64	; 100
 420:	a1 f5       	brne	.+104    	; 0x48a <DIO_TOGGLE_PIN+0x98>
 422:	27 c0       	rjmp	.+78     	; 0x472 <DIO_TOGGLE_PIN+0x80>
	{
		case'A':
		case'a':
		TOG_BIT(PORTA,pin);
 424:	2b b3       	in	r18, 0x1b	; 27
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	ac 01       	movw	r20, r24
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_TOGGLE_PIN+0x40>
 42e:	44 0f       	add	r20, r20
 430:	55 1f       	adc	r21, r21
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_TOGGLE_PIN+0x3c>
 436:	ba 01       	movw	r22, r20
 438:	62 27       	eor	r22, r18
 43a:	6b bb       	out	0x1b, r22	; 27
		break;
 43c:	08 95       	ret
		case'B':
		case'b':
		TOG_BIT(PORTB,pin);
 43e:	28 b3       	in	r18, 0x18	; 24
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	ac 01       	movw	r20, r24
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_TOGGLE_PIN+0x5a>
 448:	44 0f       	add	r20, r20
 44a:	55 1f       	adc	r21, r21
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <DIO_TOGGLE_PIN+0x56>
 450:	ba 01       	movw	r22, r20
 452:	62 27       	eor	r22, r18
 454:	68 bb       	out	0x18, r22	; 24
		break;
 456:	08 95       	ret
		case'C':
		case'c':
		TOG_BIT(PORTC,pin);
 458:	25 b3       	in	r18, 0x15	; 21
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	ac 01       	movw	r20, r24
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_TOGGLE_PIN+0x74>
 462:	44 0f       	add	r20, r20
 464:	55 1f       	adc	r21, r21
 466:	6a 95       	dec	r22
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_TOGGLE_PIN+0x70>
 46a:	ba 01       	movw	r22, r20
 46c:	62 27       	eor	r22, r18
 46e:	65 bb       	out	0x15, r22	; 21
		break;
 470:	08 95       	ret
		case'D':
		case'd':
		TOG_BIT(PORTD,pin);
 472:	22 b3       	in	r18, 0x12	; 18
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	ac 01       	movw	r20, r24
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_TOGGLE_PIN+0x8e>
 47c:	44 0f       	add	r20, r20
 47e:	55 1f       	adc	r21, r21
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_TOGGLE_PIN+0x8a>
 484:	ba 01       	movw	r22, r20
 486:	62 27       	eor	r22, r18
 488:	62 bb       	out	0x12, r22	; 18
 48a:	08 95       	ret

0000048c <DIO_READ_PIN>:
	}
}
char DIO_READ_PIN(char port,char pin)
{
	unsigned char value;
	switch(port)
 48c:	84 34       	cpi	r24, 0x44	; 68
 48e:	09 f4       	brne	.+2      	; 0x492 <DIO_READ_PIN+0x6>
 490:	51 c0       	rjmp	.+162    	; 0x534 <DIO_READ_PIN+0xa8>
 492:	85 34       	cpi	r24, 0x45	; 69
 494:	40 f4       	brcc	.+16     	; 0x4a6 <DIO_READ_PIN+0x1a>
 496:	82 34       	cpi	r24, 0x42	; 66
 498:	39 f1       	breq	.+78     	; 0x4e8 <DIO_READ_PIN+0x5c>
 49a:	83 34       	cpi	r24, 0x43	; 67
 49c:	c0 f5       	brcc	.+112    	; 0x50e <DIO_READ_PIN+0x82>
 49e:	81 34       	cpi	r24, 0x41	; 65
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <DIO_READ_PIN+0x18>
 4a2:	5a c0       	rjmp	.+180    	; 0x558 <DIO_READ_PIN+0xcc>
 4a4:	0e c0       	rjmp	.+28     	; 0x4c2 <DIO_READ_PIN+0x36>
 4a6:	82 36       	cpi	r24, 0x62	; 98
 4a8:	f9 f0       	breq	.+62     	; 0x4e8 <DIO_READ_PIN+0x5c>
 4aa:	83 36       	cpi	r24, 0x63	; 99
 4ac:	20 f4       	brcc	.+8      	; 0x4b6 <DIO_READ_PIN+0x2a>
 4ae:	81 36       	cpi	r24, 0x61	; 97
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <DIO_READ_PIN+0x28>
 4b2:	52 c0       	rjmp	.+164    	; 0x558 <DIO_READ_PIN+0xcc>
 4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <DIO_READ_PIN+0x36>
 4b6:	83 36       	cpi	r24, 0x63	; 99
 4b8:	51 f1       	breq	.+84     	; 0x50e <DIO_READ_PIN+0x82>
 4ba:	84 36       	cpi	r24, 0x64	; 100
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <DIO_READ_PIN+0x34>
 4be:	4c c0       	rjmp	.+152    	; 0x558 <DIO_READ_PIN+0xcc>
 4c0:	39 c0       	rjmp	.+114    	; 0x534 <DIO_READ_PIN+0xa8>
	{
	case'A':
	case'a':
	value=READ_BIT(PINA,pin);
 4c2:	29 b3       	in	r18, 0x19	; 25
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	06 2e       	mov	r0, r22
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_READ_PIN+0x44>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_READ_PIN+0x40>
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	82 23       	and	r24, r18
 4d8:	93 23       	and	r25, r19
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_READ_PIN+0x54>
 4dc:	95 95       	asr	r25
 4de:	87 95       	ror	r24
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_READ_PIN+0x50>
 4e4:	98 2f       	mov	r25, r24
	break;
 4e6:	38 c0       	rjmp	.+112    	; 0x558 <DIO_READ_PIN+0xcc>
	case'B':
	case'b':
	value=READ_BIT(PINB,pin);
 4e8:	26 b3       	in	r18, 0x16	; 22
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	06 2e       	mov	r0, r22
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_READ_PIN+0x6a>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	0a 94       	dec	r0
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_READ_PIN+0x66>
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	82 23       	and	r24, r18
 4fe:	93 23       	and	r25, r19
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_READ_PIN+0x7a>
 502:	95 95       	asr	r25
 504:	87 95       	ror	r24
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_READ_PIN+0x76>
 50a:	98 2f       	mov	r25, r24
	break;
 50c:	25 c0       	rjmp	.+74     	; 0x558 <DIO_READ_PIN+0xcc>
	case'C':
	case'c':
	value=READ_BIT(PINC,pin);
 50e:	23 b3       	in	r18, 0x13	; 19
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	06 2e       	mov	r0, r22
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_READ_PIN+0x90>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	0a 94       	dec	r0
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_READ_PIN+0x8c>
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	82 23       	and	r24, r18
 524:	93 23       	and	r25, r19
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_READ_PIN+0xa0>
 528:	95 95       	asr	r25
 52a:	87 95       	ror	r24
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_READ_PIN+0x9c>
 530:	98 2f       	mov	r25, r24
	break;
 532:	12 c0       	rjmp	.+36     	; 0x558 <DIO_READ_PIN+0xcc>
	case'D':
	case'd':
	value=READ_BIT(PIND,pin);
 534:	20 b3       	in	r18, 0x10	; 16
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	06 2e       	mov	r0, r22
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_READ_PIN+0xb6>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	0a 94       	dec	r0
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_READ_PIN+0xb2>
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	82 23       	and	r24, r18
 54a:	93 23       	and	r25, r19
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_READ_PIN+0xc6>
 54e:	95 95       	asr	r25
 550:	87 95       	ror	r24
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_READ_PIN+0xc2>
 556:	98 2f       	mov	r25, r24
	break;
	}	
	return value;
}	
 558:	89 2f       	mov	r24, r25
 55a:	08 95       	ret

0000055c <DIO_SET_PORT_DIR>:
void DIO_SET_PORT_DIR(char port,char dir)
{
	switch(port)
 55c:	84 34       	cpi	r24, 0x44	; 68
 55e:	d9 f0       	breq	.+54     	; 0x596 <DIO_SET_PORT_DIR+0x3a>
 560:	85 34       	cpi	r24, 0x45	; 69
 562:	38 f4       	brcc	.+14     	; 0x572 <DIO_SET_PORT_DIR+0x16>
 564:	82 34       	cpi	r24, 0x42	; 66
 566:	99 f0       	breq	.+38     	; 0x58e <DIO_SET_PORT_DIR+0x32>
 568:	83 34       	cpi	r24, 0x43	; 67
 56a:	98 f4       	brcc	.+38     	; 0x592 <DIO_SET_PORT_DIR+0x36>
 56c:	81 34       	cpi	r24, 0x41	; 65
 56e:	a1 f4       	brne	.+40     	; 0x598 <DIO_SET_PORT_DIR+0x3c>
 570:	0c c0       	rjmp	.+24     	; 0x58a <DIO_SET_PORT_DIR+0x2e>
 572:	82 36       	cpi	r24, 0x62	; 98
 574:	61 f0       	breq	.+24     	; 0x58e <DIO_SET_PORT_DIR+0x32>
 576:	83 36       	cpi	r24, 0x63	; 99
 578:	18 f4       	brcc	.+6      	; 0x580 <DIO_SET_PORT_DIR+0x24>
 57a:	81 36       	cpi	r24, 0x61	; 97
 57c:	69 f4       	brne	.+26     	; 0x598 <DIO_SET_PORT_DIR+0x3c>
 57e:	05 c0       	rjmp	.+10     	; 0x58a <DIO_SET_PORT_DIR+0x2e>
 580:	83 36       	cpi	r24, 0x63	; 99
 582:	39 f0       	breq	.+14     	; 0x592 <DIO_SET_PORT_DIR+0x36>
 584:	84 36       	cpi	r24, 0x64	; 100
 586:	41 f4       	brne	.+16     	; 0x598 <DIO_SET_PORT_DIR+0x3c>
 588:	06 c0       	rjmp	.+12     	; 0x596 <DIO_SET_PORT_DIR+0x3a>
	{
	case'A':
	case'a':
	DDRA=dir;
 58a:	6a bb       	out	0x1a, r22	; 26
	break;
 58c:	08 95       	ret
	case'B':
	case'b':
	DDRB=dir;
 58e:	67 bb       	out	0x17, r22	; 23
	break;
 590:	08 95       	ret
	case'C':
	case'c':
	DDRC=dir;
 592:	64 bb       	out	0x14, r22	; 20
	break;
 594:	08 95       	ret
	case'D':
	case'd':
	DDRD=dir;
 596:	61 bb       	out	0x11, r22	; 17
 598:	08 95       	ret

0000059a <DIO_WRITE_PORT>:
	break;
	}	
}
void DIO_WRITE_PORT(char port, char val)
{
	switch(port)
 59a:	84 34       	cpi	r24, 0x44	; 68
 59c:	d9 f0       	breq	.+54     	; 0x5d4 <DIO_WRITE_PORT+0x3a>
 59e:	85 34       	cpi	r24, 0x45	; 69
 5a0:	38 f4       	brcc	.+14     	; 0x5b0 <DIO_WRITE_PORT+0x16>
 5a2:	82 34       	cpi	r24, 0x42	; 66
 5a4:	99 f0       	breq	.+38     	; 0x5cc <DIO_WRITE_PORT+0x32>
 5a6:	83 34       	cpi	r24, 0x43	; 67
 5a8:	98 f4       	brcc	.+38     	; 0x5d0 <DIO_WRITE_PORT+0x36>
 5aa:	81 34       	cpi	r24, 0x41	; 65
 5ac:	a1 f4       	brne	.+40     	; 0x5d6 <DIO_WRITE_PORT+0x3c>
 5ae:	0c c0       	rjmp	.+24     	; 0x5c8 <DIO_WRITE_PORT+0x2e>
 5b0:	82 36       	cpi	r24, 0x62	; 98
 5b2:	61 f0       	breq	.+24     	; 0x5cc <DIO_WRITE_PORT+0x32>
 5b4:	83 36       	cpi	r24, 0x63	; 99
 5b6:	18 f4       	brcc	.+6      	; 0x5be <DIO_WRITE_PORT+0x24>
 5b8:	81 36       	cpi	r24, 0x61	; 97
 5ba:	69 f4       	brne	.+26     	; 0x5d6 <DIO_WRITE_PORT+0x3c>
 5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <DIO_WRITE_PORT+0x2e>
 5be:	83 36       	cpi	r24, 0x63	; 99
 5c0:	39 f0       	breq	.+14     	; 0x5d0 <DIO_WRITE_PORT+0x36>
 5c2:	84 36       	cpi	r24, 0x64	; 100
 5c4:	41 f4       	brne	.+16     	; 0x5d6 <DIO_WRITE_PORT+0x3c>
 5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <DIO_WRITE_PORT+0x3a>
	{
		case'A':
		case'a':
		PORTA=val;
 5c8:	6b bb       	out	0x1b, r22	; 27
		break;
 5ca:	08 95       	ret
		case'B':
		case'b':
		PORTB=val;
 5cc:	68 bb       	out	0x18, r22	; 24
		break;
 5ce:	08 95       	ret
		case'C':
		case'c':
		PORTC=val;
 5d0:	65 bb       	out	0x15, r22	; 21
		break;
 5d2:	08 95       	ret
		case'D':
		case'd':
		PORTD=val;
 5d4:	62 bb       	out	0x12, r22	; 18
 5d6:	08 95       	ret

000005d8 <DIO_READ_PORT>:
	}
}
char DIO_READ_PORT(char port)
{
	unsigned char value;
	switch(port)
 5d8:	84 34       	cpi	r24, 0x44	; 68
 5da:	d9 f0       	breq	.+54     	; 0x612 <DIO_READ_PORT+0x3a>
 5dc:	85 34       	cpi	r24, 0x45	; 69
 5de:	38 f4       	brcc	.+14     	; 0x5ee <DIO_READ_PORT+0x16>
 5e0:	82 34       	cpi	r24, 0x42	; 66
 5e2:	99 f0       	breq	.+38     	; 0x60a <DIO_READ_PORT+0x32>
 5e4:	83 34       	cpi	r24, 0x43	; 67
 5e6:	98 f4       	brcc	.+38     	; 0x60e <DIO_READ_PORT+0x36>
 5e8:	81 34       	cpi	r24, 0x41	; 65
 5ea:	a1 f4       	brne	.+40     	; 0x614 <DIO_READ_PORT+0x3c>
 5ec:	0c c0       	rjmp	.+24     	; 0x606 <DIO_READ_PORT+0x2e>
 5ee:	82 36       	cpi	r24, 0x62	; 98
 5f0:	61 f0       	breq	.+24     	; 0x60a <DIO_READ_PORT+0x32>
 5f2:	83 36       	cpi	r24, 0x63	; 99
 5f4:	18 f4       	brcc	.+6      	; 0x5fc <DIO_READ_PORT+0x24>
 5f6:	81 36       	cpi	r24, 0x61	; 97
 5f8:	69 f4       	brne	.+26     	; 0x614 <DIO_READ_PORT+0x3c>
 5fa:	05 c0       	rjmp	.+10     	; 0x606 <DIO_READ_PORT+0x2e>
 5fc:	83 36       	cpi	r24, 0x63	; 99
 5fe:	39 f0       	breq	.+14     	; 0x60e <DIO_READ_PORT+0x36>
 600:	84 36       	cpi	r24, 0x64	; 100
 602:	41 f4       	brne	.+16     	; 0x614 <DIO_READ_PORT+0x3c>
 604:	06 c0       	rjmp	.+12     	; 0x612 <DIO_READ_PORT+0x3a>
	{
		case'A':
		case'a':
		value=PINA;
 606:	99 b3       	in	r25, 0x19	; 25
		break;
 608:	05 c0       	rjmp	.+10     	; 0x614 <DIO_READ_PORT+0x3c>
		case'B':
		case'b':
		value=PINB;
 60a:	96 b3       	in	r25, 0x16	; 22
		break;
 60c:	03 c0       	rjmp	.+6      	; 0x614 <DIO_READ_PORT+0x3c>
		case'C':
		case'c':
		value=PINC;
 60e:	93 b3       	in	r25, 0x13	; 19
		break;
 610:	01 c0       	rjmp	.+2      	; 0x614 <DIO_READ_PORT+0x3c>
		case'D':
		case'd':
		value=PIND;
 612:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return value;
}
 614:	89 2f       	mov	r24, r25
 616:	08 95       	ret

00000618 <TOGGLE_PORT>:
void TOGGLE_PORT(char port)
{
	switch(port)
 618:	84 34       	cpi	r24, 0x44	; 68
 61a:	09 f1       	breq	.+66     	; 0x65e <TOGGLE_PORT+0x46>
 61c:	85 34       	cpi	r24, 0x45	; 69
 61e:	38 f4       	brcc	.+14     	; 0x62e <TOGGLE_PORT+0x16>
 620:	82 34       	cpi	r24, 0x42	; 66
 622:	a9 f0       	breq	.+42     	; 0x64e <TOGGLE_PORT+0x36>
 624:	83 34       	cpi	r24, 0x43	; 67
 626:	b8 f4       	brcc	.+46     	; 0x656 <TOGGLE_PORT+0x3e>
 628:	81 34       	cpi	r24, 0x41	; 65
 62a:	e1 f4       	brne	.+56     	; 0x664 <TOGGLE_PORT+0x4c>
 62c:	0c c0       	rjmp	.+24     	; 0x646 <TOGGLE_PORT+0x2e>
 62e:	82 36       	cpi	r24, 0x62	; 98
 630:	71 f0       	breq	.+28     	; 0x64e <TOGGLE_PORT+0x36>
 632:	83 36       	cpi	r24, 0x63	; 99
 634:	18 f4       	brcc	.+6      	; 0x63c <TOGGLE_PORT+0x24>
 636:	81 36       	cpi	r24, 0x61	; 97
 638:	a9 f4       	brne	.+42     	; 0x664 <TOGGLE_PORT+0x4c>
 63a:	05 c0       	rjmp	.+10     	; 0x646 <TOGGLE_PORT+0x2e>
 63c:	83 36       	cpi	r24, 0x63	; 99
 63e:	59 f0       	breq	.+22     	; 0x656 <TOGGLE_PORT+0x3e>
 640:	84 36       	cpi	r24, 0x64	; 100
 642:	81 f4       	brne	.+32     	; 0x664 <TOGGLE_PORT+0x4c>
 644:	0c c0       	rjmp	.+24     	; 0x65e <TOGGLE_PORT+0x46>
	{
		case'A':
		case'a':
		PORTA =~PORTA;
 646:	8b b3       	in	r24, 0x1b	; 27
 648:	80 95       	com	r24
 64a:	8b bb       	out	0x1b, r24	; 27
		break;
 64c:	08 95       	ret
		case'B':
		case'b':
		PORTB =~PORTB;
 64e:	88 b3       	in	r24, 0x18	; 24
 650:	80 95       	com	r24
 652:	88 bb       	out	0x18, r24	; 24
		break;
 654:	08 95       	ret
		case'C':
		case'c':
		PORTC =~PORTC;
 656:	85 b3       	in	r24, 0x15	; 21
 658:	80 95       	com	r24
 65a:	85 bb       	out	0x15, r24	; 21
		break;
 65c:	08 95       	ret
		case'D':
		case'd':
		PORTD =~PORTD;
 65e:	82 b3       	in	r24, 0x12	; 18
 660:	80 95       	com	r24
 662:	82 bb       	out	0x12, r24	; 18
 664:	08 95       	ret

00000666 <DIO_ENABLE_PULLUP>:
		break;
	}		
}
void DIO_ENABLE_PULLUP(char port,char pin, char enable)
{
	switch(port)
 666:	84 34       	cpi	r24, 0x44	; 68
 668:	09 f4       	brne	.+2      	; 0x66c <DIO_ENABLE_PULLUP+0x6>
 66a:	71 c0       	rjmp	.+226    	; 0x74e <DIO_ENABLE_PULLUP+0xe8>
 66c:	85 34       	cpi	r24, 0x45	; 69
 66e:	48 f4       	brcc	.+18     	; 0x682 <DIO_ENABLE_PULLUP+0x1c>
 670:	82 34       	cpi	r24, 0x42	; 66
 672:	99 f1       	breq	.+102    	; 0x6da <DIO_ENABLE_PULLUP+0x74>
 674:	83 34       	cpi	r24, 0x43	; 67
 676:	08 f0       	brcs	.+2      	; 0x67a <DIO_ENABLE_PULLUP+0x14>
 678:	4d c0       	rjmp	.+154    	; 0x714 <DIO_ENABLE_PULLUP+0xae>
 67a:	81 34       	cpi	r24, 0x41	; 65
 67c:	09 f0       	breq	.+2      	; 0x680 <DIO_ENABLE_PULLUP+0x1a>
 67e:	83 c0       	rjmp	.+262    	; 0x786 <DIO_ENABLE_PULLUP+0x120>
 680:	0f c0       	rjmp	.+30     	; 0x6a0 <DIO_ENABLE_PULLUP+0x3a>
 682:	82 36       	cpi	r24, 0x62	; 98
 684:	51 f1       	breq	.+84     	; 0x6da <DIO_ENABLE_PULLUP+0x74>
 686:	83 36       	cpi	r24, 0x63	; 99
 688:	20 f4       	brcc	.+8      	; 0x692 <DIO_ENABLE_PULLUP+0x2c>
 68a:	81 36       	cpi	r24, 0x61	; 97
 68c:	09 f0       	breq	.+2      	; 0x690 <DIO_ENABLE_PULLUP+0x2a>
 68e:	7b c0       	rjmp	.+246    	; 0x786 <DIO_ENABLE_PULLUP+0x120>
 690:	07 c0       	rjmp	.+14     	; 0x6a0 <DIO_ENABLE_PULLUP+0x3a>
 692:	83 36       	cpi	r24, 0x63	; 99
 694:	09 f4       	brne	.+2      	; 0x698 <DIO_ENABLE_PULLUP+0x32>
 696:	3e c0       	rjmp	.+124    	; 0x714 <DIO_ENABLE_PULLUP+0xae>
 698:	84 36       	cpi	r24, 0x64	; 100
 69a:	09 f0       	breq	.+2      	; 0x69e <DIO_ENABLE_PULLUP+0x38>
 69c:	74 c0       	rjmp	.+232    	; 0x786 <DIO_ENABLE_PULLUP+0x120>
 69e:	57 c0       	rjmp	.+174    	; 0x74e <DIO_ENABLE_PULLUP+0xe8>
	{
		case'A':
		case'a':
		if(enable==1)
 6a0:	41 30       	cpi	r20, 0x01	; 1
 6a2:	69 f4       	brne	.+26     	; 0x6be <DIO_ENABLE_PULLUP+0x58>
		SET_BIT(PORTA,pin);
 6a4:	2b b3       	in	r18, 0x1b	; 27
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	ac 01       	movw	r20, r24
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_ENABLE_PULLUP+0x4c>
 6ae:	44 0f       	add	r20, r20
 6b0:	55 1f       	adc	r21, r21
 6b2:	6a 95       	dec	r22
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_ENABLE_PULLUP+0x48>
 6b6:	ba 01       	movw	r22, r20
 6b8:	62 2b       	or	r22, r18
 6ba:	6b bb       	out	0x1b, r22	; 27
 6bc:	08 95       	ret
		else
		CLR_BIT(PORTA,pin);
 6be:	2b b3       	in	r18, 0x1b	; 27
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	ac 01       	movw	r20, r24
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_ENABLE_PULLUP+0x66>
 6c8:	44 0f       	add	r20, r20
 6ca:	55 1f       	adc	r21, r21
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_ENABLE_PULLUP+0x62>
 6d0:	ba 01       	movw	r22, r20
 6d2:	60 95       	com	r22
 6d4:	62 23       	and	r22, r18
 6d6:	6b bb       	out	0x1b, r22	; 27
 6d8:	08 95       	ret
		break;
		case'B':
		case'b':
		if(enable==1)
 6da:	41 30       	cpi	r20, 0x01	; 1
 6dc:	69 f4       	brne	.+26     	; 0x6f8 <DIO_ENABLE_PULLUP+0x92>
		SET_BIT(PORTB,pin);
 6de:	28 b3       	in	r18, 0x18	; 24
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	ac 01       	movw	r20, r24
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_ENABLE_PULLUP+0x86>
 6e8:	44 0f       	add	r20, r20
 6ea:	55 1f       	adc	r21, r21
 6ec:	6a 95       	dec	r22
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_ENABLE_PULLUP+0x82>
 6f0:	ba 01       	movw	r22, r20
 6f2:	62 2b       	or	r22, r18
 6f4:	68 bb       	out	0x18, r22	; 24
 6f6:	08 95       	ret
		else
		CLR_BIT(PORTB,pin);
 6f8:	28 b3       	in	r18, 0x18	; 24
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	ac 01       	movw	r20, r24
 700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_ENABLE_PULLUP+0xa0>
 702:	44 0f       	add	r20, r20
 704:	55 1f       	adc	r21, r21
 706:	6a 95       	dec	r22
 708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_ENABLE_PULLUP+0x9c>
 70a:	ba 01       	movw	r22, r20
 70c:	60 95       	com	r22
 70e:	62 23       	and	r22, r18
 710:	68 bb       	out	0x18, r22	; 24
 712:	08 95       	ret
		break;
		case'C':
		case'c':
		if(enable==1)
 714:	41 30       	cpi	r20, 0x01	; 1
 716:	69 f4       	brne	.+26     	; 0x732 <DIO_ENABLE_PULLUP+0xcc>
		SET_BIT(PORTC,pin);
 718:	25 b3       	in	r18, 0x15	; 21
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	ac 01       	movw	r20, r24
 720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_ENABLE_PULLUP+0xc0>
 722:	44 0f       	add	r20, r20
 724:	55 1f       	adc	r21, r21
 726:	6a 95       	dec	r22
 728:	e2 f7       	brpl	.-8      	; 0x722 <DIO_ENABLE_PULLUP+0xbc>
 72a:	ba 01       	movw	r22, r20
 72c:	62 2b       	or	r22, r18
 72e:	65 bb       	out	0x15, r22	; 21
 730:	08 95       	ret
		else
		CLR_BIT(PORTC,pin);
 732:	25 b3       	in	r18, 0x15	; 21
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	ac 01       	movw	r20, r24
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_ENABLE_PULLUP+0xda>
 73c:	44 0f       	add	r20, r20
 73e:	55 1f       	adc	r21, r21
 740:	6a 95       	dec	r22
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_ENABLE_PULLUP+0xd6>
 744:	ba 01       	movw	r22, r20
 746:	60 95       	com	r22
 748:	62 23       	and	r22, r18
 74a:	65 bb       	out	0x15, r22	; 21
 74c:	08 95       	ret
		break;
		case'D':
		case'd':
		if(enable==1)
 74e:	41 30       	cpi	r20, 0x01	; 1
 750:	69 f4       	brne	.+26     	; 0x76c <DIO_ENABLE_PULLUP+0x106>
		SET_BIT(PORTD,pin);
 752:	22 b3       	in	r18, 0x12	; 18
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	ac 01       	movw	r20, r24
 75a:	02 c0       	rjmp	.+4      	; 0x760 <DIO_ENABLE_PULLUP+0xfa>
 75c:	44 0f       	add	r20, r20
 75e:	55 1f       	adc	r21, r21
 760:	6a 95       	dec	r22
 762:	e2 f7       	brpl	.-8      	; 0x75c <DIO_ENABLE_PULLUP+0xf6>
 764:	ba 01       	movw	r22, r20
 766:	62 2b       	or	r22, r18
 768:	62 bb       	out	0x12, r22	; 18
 76a:	08 95       	ret
		else
		CLR_BIT(PORTD,pin);
 76c:	22 b3       	in	r18, 0x12	; 18
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	ac 01       	movw	r20, r24
 774:	02 c0       	rjmp	.+4      	; 0x77a <DIO_ENABLE_PULLUP+0x114>
 776:	44 0f       	add	r20, r20
 778:	55 1f       	adc	r21, r21
 77a:	6a 95       	dec	r22
 77c:	e2 f7       	brpl	.-8      	; 0x776 <DIO_ENABLE_PULLUP+0x110>
 77e:	ba 01       	movw	r22, r20
 780:	60 95       	com	r22
 782:	62 23       	and	r22, r18
 784:	62 bb       	out	0x12, r22	; 18
 786:	08 95       	ret

00000788 <DIO_WRITE_LOW_NIBBLE>:
		break;
	}
}	
	void DIO_WRITE_LOW_NIBBLE(char port, char value)
	{
		value &=0x0f;
 788:	6f 70       	andi	r22, 0x0F	; 15
		 switch(port)
 78a:	84 34       	cpi	r24, 0x44	; 68
 78c:	51 f1       	breq	.+84     	; 0x7e2 <DIO_WRITE_LOW_NIBBLE+0x5a>
 78e:	85 34       	cpi	r24, 0x45	; 69
 790:	38 f4       	brcc	.+14     	; 0x7a0 <DIO_WRITE_LOW_NIBBLE+0x18>
 792:	82 34       	cpi	r24, 0x42	; 66
 794:	c1 f0       	breq	.+48     	; 0x7c6 <DIO_WRITE_LOW_NIBBLE+0x3e>
 796:	83 34       	cpi	r24, 0x43	; 67
 798:	e8 f4       	brcc	.+58     	; 0x7d4 <DIO_WRITE_LOW_NIBBLE+0x4c>
 79a:	81 34       	cpi	r24, 0x41	; 65
 79c:	41 f5       	brne	.+80     	; 0x7ee <DIO_WRITE_LOW_NIBBLE+0x66>
 79e:	0c c0       	rjmp	.+24     	; 0x7b8 <DIO_WRITE_LOW_NIBBLE+0x30>
 7a0:	82 36       	cpi	r24, 0x62	; 98
 7a2:	89 f0       	breq	.+34     	; 0x7c6 <DIO_WRITE_LOW_NIBBLE+0x3e>
 7a4:	83 36       	cpi	r24, 0x63	; 99
 7a6:	18 f4       	brcc	.+6      	; 0x7ae <DIO_WRITE_LOW_NIBBLE+0x26>
 7a8:	81 36       	cpi	r24, 0x61	; 97
 7aa:	09 f5       	brne	.+66     	; 0x7ee <DIO_WRITE_LOW_NIBBLE+0x66>
 7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <DIO_WRITE_LOW_NIBBLE+0x30>
 7ae:	83 36       	cpi	r24, 0x63	; 99
 7b0:	89 f0       	breq	.+34     	; 0x7d4 <DIO_WRITE_LOW_NIBBLE+0x4c>
 7b2:	84 36       	cpi	r24, 0x64	; 100
 7b4:	e1 f4       	brne	.+56     	; 0x7ee <DIO_WRITE_LOW_NIBBLE+0x66>
 7b6:	15 c0       	rjmp	.+42     	; 0x7e2 <DIO_WRITE_LOW_NIBBLE+0x5a>
		 {
			 case'A':
			 case'a':
			 PORTA &=0xf0;
 7b8:	8b b3       	in	r24, 0x1b	; 27
 7ba:	80 7f       	andi	r24, 0xF0	; 240
 7bc:	8b bb       	out	0x1b, r24	; 27
			 PORTA|=value;
 7be:	8b b3       	in	r24, 0x1b	; 27
 7c0:	68 2b       	or	r22, r24
 7c2:	6b bb       	out	0x1b, r22	; 27
			 break;
 7c4:	08 95       	ret
			 case'B':
			  case'b':
			  PORTB &=0xf0;
 7c6:	88 b3       	in	r24, 0x18	; 24
 7c8:	80 7f       	andi	r24, 0xF0	; 240
 7ca:	88 bb       	out	0x18, r24	; 24
			  PORTB|=value;
 7cc:	88 b3       	in	r24, 0x18	; 24
 7ce:	68 2b       	or	r22, r24
 7d0:	68 bb       	out	0x18, r22	; 24
			  break;
 7d2:	08 95       	ret
			  case'C':
			  case'c':
			  PORTC &=0xf0;
 7d4:	85 b3       	in	r24, 0x15	; 21
 7d6:	80 7f       	andi	r24, 0xF0	; 240
 7d8:	85 bb       	out	0x15, r24	; 21
			  PORTC|=value;
 7da:	85 b3       	in	r24, 0x15	; 21
 7dc:	68 2b       	or	r22, r24
 7de:	65 bb       	out	0x15, r22	; 21
			  break;
 7e0:	08 95       	ret
			   case'D':
			   case'd':
			   PORTD &=0xf0;
 7e2:	82 b3       	in	r24, 0x12	; 18
 7e4:	80 7f       	andi	r24, 0xF0	; 240
 7e6:	82 bb       	out	0x12, r24	; 18
			   PORTD|=value;
 7e8:	82 b3       	in	r24, 0x12	; 18
 7ea:	68 2b       	or	r22, r24
 7ec:	62 bb       	out	0x12, r22	; 18
 7ee:	08 95       	ret

000007f0 <DIO_WRITE_HIGH_NIBBLE>:
			 
		 }
	}
	void DIO_WRITE_HIGH_NIBBLE(char port, char value)
	{
		value<<=4;
 7f0:	62 95       	swap	r22
 7f2:	60 7f       	andi	r22, 0xF0	; 240
		switch(port)
 7f4:	84 34       	cpi	r24, 0x44	; 68
 7f6:	51 f1       	breq	.+84     	; 0x84c <DIO_WRITE_HIGH_NIBBLE+0x5c>
 7f8:	85 34       	cpi	r24, 0x45	; 69
 7fa:	38 f4       	brcc	.+14     	; 0x80a <DIO_WRITE_HIGH_NIBBLE+0x1a>
 7fc:	82 34       	cpi	r24, 0x42	; 66
 7fe:	c1 f0       	breq	.+48     	; 0x830 <DIO_WRITE_HIGH_NIBBLE+0x40>
 800:	83 34       	cpi	r24, 0x43	; 67
 802:	e8 f4       	brcc	.+58     	; 0x83e <DIO_WRITE_HIGH_NIBBLE+0x4e>
 804:	81 34       	cpi	r24, 0x41	; 65
 806:	41 f5       	brne	.+80     	; 0x858 <DIO_WRITE_HIGH_NIBBLE+0x68>
 808:	0c c0       	rjmp	.+24     	; 0x822 <DIO_WRITE_HIGH_NIBBLE+0x32>
 80a:	82 36       	cpi	r24, 0x62	; 98
 80c:	89 f0       	breq	.+34     	; 0x830 <DIO_WRITE_HIGH_NIBBLE+0x40>
 80e:	83 36       	cpi	r24, 0x63	; 99
 810:	18 f4       	brcc	.+6      	; 0x818 <DIO_WRITE_HIGH_NIBBLE+0x28>
 812:	81 36       	cpi	r24, 0x61	; 97
 814:	09 f5       	brne	.+66     	; 0x858 <DIO_WRITE_HIGH_NIBBLE+0x68>
 816:	05 c0       	rjmp	.+10     	; 0x822 <DIO_WRITE_HIGH_NIBBLE+0x32>
 818:	83 36       	cpi	r24, 0x63	; 99
 81a:	89 f0       	breq	.+34     	; 0x83e <DIO_WRITE_HIGH_NIBBLE+0x4e>
 81c:	84 36       	cpi	r24, 0x64	; 100
 81e:	e1 f4       	brne	.+56     	; 0x858 <DIO_WRITE_HIGH_NIBBLE+0x68>
 820:	15 c0       	rjmp	.+42     	; 0x84c <DIO_WRITE_HIGH_NIBBLE+0x5c>
		{
			case'A':
			case'a':
			PORTA &=0x0f;
 822:	8b b3       	in	r24, 0x1b	; 27
 824:	8f 70       	andi	r24, 0x0F	; 15
 826:	8b bb       	out	0x1b, r24	; 27
			PORTA|=value;
 828:	8b b3       	in	r24, 0x1b	; 27
 82a:	68 2b       	or	r22, r24
 82c:	6b bb       	out	0x1b, r22	; 27
			break;
 82e:	08 95       	ret
			case'B':
			case'b':
			PORTB &=0x0f;
 830:	88 b3       	in	r24, 0x18	; 24
 832:	8f 70       	andi	r24, 0x0F	; 15
 834:	88 bb       	out	0x18, r24	; 24
			PORTB|=value;
 836:	88 b3       	in	r24, 0x18	; 24
 838:	68 2b       	or	r22, r24
 83a:	68 bb       	out	0x18, r22	; 24
			break;
 83c:	08 95       	ret
			case'C':
			case'c':
			PORTC &=0x0f;
 83e:	85 b3       	in	r24, 0x15	; 21
 840:	8f 70       	andi	r24, 0x0F	; 15
 842:	85 bb       	out	0x15, r24	; 21
			PORTC|=value;
 844:	85 b3       	in	r24, 0x15	; 21
 846:	68 2b       	or	r22, r24
 848:	65 bb       	out	0x15, r22	; 21
			break;
 84a:	08 95       	ret
			case'D':
			case'd':
			PORTD &=0x0f;
 84c:	82 b3       	in	r24, 0x12	; 18
 84e:	8f 70       	andi	r24, 0x0F	; 15
 850:	82 bb       	out	0x12, r24	; 18
			PORTD|=value;
 852:	82 b3       	in	r24, 0x12	; 18
 854:	68 2b       	or	r22, r24
 856:	62 bb       	out	0x12, r22	; 18
 858:	08 95       	ret

0000085a <enable>:
	_delay_ms(1);
	#endif
}
void enable()
{
	DIO_WRITE_PIN('B',EN,1);
 85a:	82 e4       	ldi	r24, 0x42	; 66
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	41 e0       	ldi	r20, 0x01	; 1
 860:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_WRITE_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 864:	8f e9       	ldi	r24, 0x9F	; 159
 866:	9f e0       	ldi	r25, 0x0F	; 15
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	f1 f7       	brne	.-4      	; 0x868 <__stack+0x9>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
 86e:	00 00       	nop
	_delay_ms(2);
	DIO_WRITE_PIN('B',EN,0);
 870:	82 e4       	ldi	r24, 0x42	; 66
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	40 e0       	ldi	r20, 0x00	; 0
 876:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_WRITE_PIN>
 87a:	8f e9       	ldi	r24, 0x9F	; 159
 87c:	9f e0       	ldi	r25, 0x0F	; 15
 87e:	01 97       	sbiw	r24, 0x01	; 1
 880:	f1 f7       	brne	.-4      	; 0x87e <__stack+0x1f>
 882:	00 c0       	rjmp	.+0      	; 0x884 <__stack+0x25>
 884:	00 00       	nop
	_delay_ms(2);
	
}
 886:	08 95       	ret

00000888 <LCD_SEND_CHAR>:
void LCD_SEND_CHAR(char data)
{
 888:	cf 93       	push	r28
 88a:	c8 2f       	mov	r28, r24
	#if defined EIGHT_BIT_MODE
	DIO_WRITE_PORT('D',data);
	DIO_WRITE_PIN('B',RS,1);
	enable();
	#elif defined FOUR_BIT_MODE
	DIO_WRITE_HIGH_NIBBLE('D',data>>4);
 88c:	68 2f       	mov	r22, r24
 88e:	62 95       	swap	r22
 890:	6f 70       	andi	r22, 0x0F	; 15
 892:	84 e4       	ldi	r24, 0x44	; 68
 894:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <DIO_WRITE_HIGH_NIBBLE>
	DIO_WRITE_PIN('B',RS,1);
 898:	82 e4       	ldi	r24, 0x42	; 66
 89a:	61 e0       	ldi	r22, 0x01	; 1
 89c:	41 e0       	ldi	r20, 0x01	; 1
 89e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_WRITE_PIN>
	enable();
 8a2:	0e 94 2d 04 	call	0x85a	; 0x85a <enable>
	DIO_WRITE_HIGH_NIBBLE('D',data);
 8a6:	84 e4       	ldi	r24, 0x44	; 68
 8a8:	6c 2f       	mov	r22, r28
 8aa:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <DIO_WRITE_HIGH_NIBBLE>
	enable();
 8ae:	0e 94 2d 04 	call	0x85a	; 0x85a <enable>
 8b2:	8f ec       	ldi	r24, 0xCF	; 207
 8b4:	97 e0       	ldi	r25, 0x07	; 7
 8b6:	01 97       	sbiw	r24, 0x01	; 1
 8b8:	f1 f7       	brne	.-4      	; 0x8b6 <LCD_SEND_CHAR+0x2e>
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <LCD_SEND_CHAR+0x34>
 8bc:	00 00       	nop
	#endif
	_delay_ms(1);
}
 8be:	cf 91       	pop	r28
 8c0:	08 95       	ret

000008c2 <LCD_SEND_CMD>:
void LCD_SEND_CMD(char cmd)
{
 8c2:	cf 93       	push	r28
 8c4:	c8 2f       	mov	r28, r24
	DIO_WRITE_PORT('D',cmd);
	DIO_WRITE_PIN('B',RS,0);
	enable();
	#elif defined FOUR_BIT_MODE
	
	DIO_WRITE_HIGH_NIBBLE('D',cmd>>4);
 8c6:	68 2f       	mov	r22, r24
 8c8:	62 95       	swap	r22
 8ca:	6f 70       	andi	r22, 0x0F	; 15
 8cc:	84 e4       	ldi	r24, 0x44	; 68
 8ce:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <DIO_WRITE_HIGH_NIBBLE>
	DIO_WRITE_PIN('B',RS,0);
 8d2:	82 e4       	ldi	r24, 0x42	; 66
 8d4:	61 e0       	ldi	r22, 0x01	; 1
 8d6:	40 e0       	ldi	r20, 0x00	; 0
 8d8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_WRITE_PIN>
	enable();
 8dc:	0e 94 2d 04 	call	0x85a	; 0x85a <enable>
	DIO_WRITE_HIGH_NIBBLE('D',cmd);
 8e0:	84 e4       	ldi	r24, 0x44	; 68
 8e2:	6c 2f       	mov	r22, r28
 8e4:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <DIO_WRITE_HIGH_NIBBLE>
	DIO_WRITE_PIN('B',RS,0);
 8e8:	82 e4       	ldi	r24, 0x42	; 66
 8ea:	61 e0       	ldi	r22, 0x01	; 1
 8ec:	40 e0       	ldi	r20, 0x00	; 0
 8ee:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_WRITE_PIN>
	enable();
 8f2:	0e 94 2d 04 	call	0x85a	; 0x85a <enable>
 8f6:	8f ec       	ldi	r24, 0xCF	; 207
 8f8:	97 e0       	ldi	r25, 0x07	; 7
 8fa:	01 97       	sbiw	r24, 0x01	; 1
 8fc:	f1 f7       	brne	.-4      	; 0x8fa <LCD_SEND_CMD+0x38>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <LCD_SEND_CMD+0x3e>
 900:	00 00       	nop
	#endif
	_delay_ms(1);
	
	
}
 902:	cf 91       	pop	r28
 904:	08 95       	ret

00000906 <LCD_INIT>:
	LCD_SEND_CMD(CLR_SCREEN);//clear the screen
	_delay_ms(10);
	LCD_SEND_CMD(ENTRY_MODE); //entry mode
	_delay_ms(1);
	#elif defined FOUR_BIT_MODE
	DIO_SET_PIN_DIR('D',4,1);
 906:	84 e4       	ldi	r24, 0x44	; 68
 908:	64 e0       	ldi	r22, 0x04	; 4
 90a:	41 e0       	ldi	r20, 0x01	; 1
 90c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',5,1);
 910:	84 e4       	ldi	r24, 0x44	; 68
 912:	65 e0       	ldi	r22, 0x05	; 5
 914:	41 e0       	ldi	r20, 0x01	; 1
 916:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',6,1);
 91a:	84 e4       	ldi	r24, 0x44	; 68
 91c:	66 e0       	ldi	r22, 0x06	; 6
 91e:	41 e0       	ldi	r20, 0x01	; 1
 920:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',7,1);
 924:	84 e4       	ldi	r24, 0x44	; 68
 926:	67 e0       	ldi	r22, 0x07	; 7
 928:	41 e0       	ldi	r20, 0x01	; 1
 92a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',EN,1);
 92e:	82 e4       	ldi	r24, 0x42	; 66
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	41 e0       	ldi	r20, 0x01	; 1
 934:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',RW,1);
 938:	82 e4       	ldi	r24, 0x42	; 66
 93a:	62 e0       	ldi	r22, 0x02	; 2
 93c:	41 e0       	ldi	r20, 0x01	; 1
 93e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',RS,1);
 942:	82 e4       	ldi	r24, 0x42	; 66
 944:	61 e0       	ldi	r22, 0x01	; 1
 946:	41 e0       	ldi	r20, 0x01	; 1
 948:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_SET_PIN_DIR>
	DIO_WRITE_PIN('B',RW,0);
 94c:	82 e4       	ldi	r24, 0x42	; 66
 94e:	62 e0       	ldi	r22, 0x02	; 2
 950:	40 e0       	ldi	r20, 0x00	; 0
 952:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_WRITE_PIN>
	LCD_SEND_CMD(RETURN_HOME); //return home
 956:	82 e0       	ldi	r24, 0x02	; 2
 958:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_SEND_CMD>
 95c:	8f e1       	ldi	r24, 0x1F	; 31
 95e:	9e e4       	ldi	r25, 0x4E	; 78
 960:	01 97       	sbiw	r24, 0x01	; 1
 962:	f1 f7       	brne	.-4      	; 0x960 <LCD_INIT+0x5a>
 964:	00 c0       	rjmp	.+0      	; 0x966 <LCD_INIT+0x60>
 966:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD(FOUR_BITS); //4bit mode
 968:	88 e2       	ldi	r24, 0x28	; 40
 96a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_SEND_CMD>
 96e:	8f ec       	ldi	r24, 0xCF	; 207
 970:	97 e0       	ldi	r25, 0x07	; 7
 972:	01 97       	sbiw	r24, 0x01	; 1
 974:	f1 f7       	brne	.-4      	; 0x972 <LCD_INIT+0x6c>
 976:	00 c0       	rjmp	.+0      	; 0x978 <LCD_INIT+0x72>
 978:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(CURSOR_ON_DISPLAN_ON);//display on cursor on
 97a:	8c e0       	ldi	r24, 0x0C	; 12
 97c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_SEND_CMD>
 980:	8f ec       	ldi	r24, 0xCF	; 207
 982:	97 e0       	ldi	r25, 0x07	; 7
 984:	01 97       	sbiw	r24, 0x01	; 1
 986:	f1 f7       	brne	.-4      	; 0x984 <LCD_INIT+0x7e>
 988:	00 c0       	rjmp	.+0      	; 0x98a <LCD_INIT+0x84>
 98a:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(CLR_SCREEN);//clear the screen
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_SEND_CMD>
 992:	8f e1       	ldi	r24, 0x1F	; 31
 994:	9e e4       	ldi	r25, 0x4E	; 78
 996:	01 97       	sbiw	r24, 0x01	; 1
 998:	f1 f7       	brne	.-4      	; 0x996 <LCD_INIT+0x90>
 99a:	00 c0       	rjmp	.+0      	; 0x99c <LCD_INIT+0x96>
 99c:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD(ENTRY_MODE); //entry mode
 99e:	86 e0       	ldi	r24, 0x06	; 6
 9a0:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_SEND_CMD>
 9a4:	8f ec       	ldi	r24, 0xCF	; 207
 9a6:	97 e0       	ldi	r25, 0x07	; 7
 9a8:	01 97       	sbiw	r24, 0x01	; 1
 9aa:	f1 f7       	brne	.-4      	; 0x9a8 <LCD_INIT+0xa2>
 9ac:	00 c0       	rjmp	.+0      	; 0x9ae <LCD_INIT+0xa8>
 9ae:	00 00       	nop
	_delay_ms(1);
	#endif
}
 9b0:	08 95       	ret

000009b2 <LCD_CLEAR_SCREEN>:
	
	
}
void LCD_CLEAR_SCREEN()
{
	LCD_SEND_CMD(CLR_SCREEN);
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_SEND_CMD>
}
 9b8:	08 95       	ret

000009ba <LCD_MOVE_CURSOR>:
void LCD_MOVE_CURSOR(char row,char column)
{
	char data;
	if(row>2||row<0||column>16||column<0)
 9ba:	83 30       	cpi	r24, 0x03	; 3
 9bc:	60 f4       	brcc	.+24     	; 0x9d6 <LCD_MOVE_CURSOR+0x1c>
 9be:	61 31       	cpi	r22, 0x11	; 17
 9c0:	60 f4       	brcc	.+24     	; 0x9da <LCD_MOVE_CURSOR+0x20>
	{
		data=SET_ADDRESS_1;
	}
	else if (row==1)
 9c2:	81 30       	cpi	r24, 0x01	; 1
 9c4:	19 f4       	brne	.+6      	; 0x9cc <LCD_MOVE_CURSOR+0x12>
	{
		data= SET_ADDRESS_1+column-1;
 9c6:	96 2f       	mov	r25, r22
 9c8:	91 58       	subi	r25, 0x81	; 129
 9ca:	08 c0       	rjmp	.+16     	; 0x9dc <LCD_MOVE_CURSOR+0x22>
	}
	else if(row==2)
 9cc:	82 30       	cpi	r24, 0x02	; 2
 9ce:	31 f4       	brne	.+12     	; 0x9dc <LCD_MOVE_CURSOR+0x22>
	{
		data=SET_ADDRESS_2+column-1;
 9d0:	96 2f       	mov	r25, r22
 9d2:	91 54       	subi	r25, 0x41	; 65
 9d4:	03 c0       	rjmp	.+6      	; 0x9dc <LCD_MOVE_CURSOR+0x22>
void LCD_MOVE_CURSOR(char row,char column)
{
	char data;
	if(row>2||row<0||column>16||column<0)
	{
		data=SET_ADDRESS_1;
 9d6:	90 e8       	ldi	r25, 0x80	; 128
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <LCD_MOVE_CURSOR+0x22>
 9da:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if(row==2)
	{
		data=SET_ADDRESS_2+column-1;
	}
	LCD_SEND_CMD(data);
 9dc:	89 2f       	mov	r24, r25
 9de:	0e 94 61 04 	call	0x8c2	; 0x8c2 <LCD_SEND_CMD>
 9e2:	8f ec       	ldi	r24, 0xCF	; 207
 9e4:	97 e0       	ldi	r25, 0x07	; 7
 9e6:	01 97       	sbiw	r24, 0x01	; 1
 9e8:	f1 f7       	brne	.-4      	; 0x9e6 <LCD_MOVE_CURSOR+0x2c>
 9ea:	00 c0       	rjmp	.+0      	; 0x9ec <LCD_MOVE_CURSOR+0x32>
 9ec:	00 00       	nop
	_delay_ms(1);
}
 9ee:	08 95       	ret

000009f0 <LCD_SEND_STRING>:
void LCD_SEND_STRING(char*ptr)
{
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	ec 01       	movw	r28, r24
	while(*ptr!='\0')
 9f6:	88 81       	ld	r24, Y
 9f8:	88 23       	and	r24, r24
 9fa:	31 f0       	breq	.+12     	; 0xa08 <LCD_SEND_STRING+0x18>
		data=SET_ADDRESS_2+column-1;
	}
	LCD_SEND_CMD(data);
	_delay_ms(1);
}
void LCD_SEND_STRING(char*ptr)
 9fc:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr!='\0')
	{
		LCD_SEND_CHAR(*ptr);
 9fe:	0e 94 44 04 	call	0x888	; 0x888 <LCD_SEND_CHAR>
	LCD_SEND_CMD(data);
	_delay_ms(1);
}
void LCD_SEND_STRING(char*ptr)
{
	while(*ptr!='\0')
 a02:	89 91       	ld	r24, Y+
 a04:	88 23       	and	r24, r24
 a06:	d9 f7       	brne	.-10     	; 0x9fe <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*ptr);
		ptr++;
	}
 a08:	df 91       	pop	r29
 a0a:	cf 91       	pop	r28
 a0c:	08 95       	ret

00000a0e <__fixunssfsi>:
 a0e:	70 d0       	rcall	.+224    	; 0xaf0 <__fp_splitA>
 a10:	88 f0       	brcs	.+34     	; 0xa34 <__fixunssfsi+0x26>
 a12:	9f 57       	subi	r25, 0x7F	; 127
 a14:	90 f0       	brcs	.+36     	; 0xa3a <__fixunssfsi+0x2c>
 a16:	b9 2f       	mov	r27, r25
 a18:	99 27       	eor	r25, r25
 a1a:	b7 51       	subi	r27, 0x17	; 23
 a1c:	a0 f0       	brcs	.+40     	; 0xa46 <__fixunssfsi+0x38>
 a1e:	d1 f0       	breq	.+52     	; 0xa54 <__fixunssfsi+0x46>
 a20:	66 0f       	add	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	1a f0       	brmi	.+6      	; 0xa30 <__fixunssfsi+0x22>
 a2a:	ba 95       	dec	r27
 a2c:	c9 f7       	brne	.-14     	; 0xa20 <__fixunssfsi+0x12>
 a2e:	12 c0       	rjmp	.+36     	; 0xa54 <__fixunssfsi+0x46>
 a30:	b1 30       	cpi	r27, 0x01	; 1
 a32:	81 f0       	breq	.+32     	; 0xa54 <__fixunssfsi+0x46>
 a34:	77 d0       	rcall	.+238    	; 0xb24 <__fp_zero>
 a36:	b1 e0       	ldi	r27, 0x01	; 1
 a38:	08 95       	ret
 a3a:	74 c0       	rjmp	.+232    	; 0xb24 <__fp_zero>
 a3c:	67 2f       	mov	r22, r23
 a3e:	78 2f       	mov	r23, r24
 a40:	88 27       	eor	r24, r24
 a42:	b8 5f       	subi	r27, 0xF8	; 248
 a44:	39 f0       	breq	.+14     	; 0xa54 <__fixunssfsi+0x46>
 a46:	b9 3f       	cpi	r27, 0xF9	; 249
 a48:	cc f3       	brlt	.-14     	; 0xa3c <__fixunssfsi+0x2e>
 a4a:	86 95       	lsr	r24
 a4c:	77 95       	ror	r23
 a4e:	67 95       	ror	r22
 a50:	b3 95       	inc	r27
 a52:	d9 f7       	brne	.-10     	; 0xa4a <__fixunssfsi+0x3c>
 a54:	3e f4       	brtc	.+14     	; 0xa64 <__fixunssfsi+0x56>
 a56:	90 95       	com	r25
 a58:	80 95       	com	r24
 a5a:	70 95       	com	r23
 a5c:	61 95       	neg	r22
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	8f 4f       	sbci	r24, 0xFF	; 255
 a62:	9f 4f       	sbci	r25, 0xFF	; 255
 a64:	08 95       	ret

00000a66 <__floatunsisf>:
 a66:	e8 94       	clt
 a68:	09 c0       	rjmp	.+18     	; 0xa7c <__floatsisf+0x12>

00000a6a <__floatsisf>:
 a6a:	97 fb       	bst	r25, 7
 a6c:	3e f4       	brtc	.+14     	; 0xa7c <__floatsisf+0x12>
 a6e:	90 95       	com	r25
 a70:	80 95       	com	r24
 a72:	70 95       	com	r23
 a74:	61 95       	neg	r22
 a76:	7f 4f       	sbci	r23, 0xFF	; 255
 a78:	8f 4f       	sbci	r24, 0xFF	; 255
 a7a:	9f 4f       	sbci	r25, 0xFF	; 255
 a7c:	99 23       	and	r25, r25
 a7e:	a9 f0       	breq	.+42     	; 0xaaa <__floatsisf+0x40>
 a80:	f9 2f       	mov	r31, r25
 a82:	96 e9       	ldi	r25, 0x96	; 150
 a84:	bb 27       	eor	r27, r27
 a86:	93 95       	inc	r25
 a88:	f6 95       	lsr	r31
 a8a:	87 95       	ror	r24
 a8c:	77 95       	ror	r23
 a8e:	67 95       	ror	r22
 a90:	b7 95       	ror	r27
 a92:	f1 11       	cpse	r31, r1
 a94:	f8 cf       	rjmp	.-16     	; 0xa86 <__floatsisf+0x1c>
 a96:	fa f4       	brpl	.+62     	; 0xad6 <__floatsisf+0x6c>
 a98:	bb 0f       	add	r27, r27
 a9a:	11 f4       	brne	.+4      	; 0xaa0 <__floatsisf+0x36>
 a9c:	60 ff       	sbrs	r22, 0
 a9e:	1b c0       	rjmp	.+54     	; 0xad6 <__floatsisf+0x6c>
 aa0:	6f 5f       	subi	r22, 0xFF	; 255
 aa2:	7f 4f       	sbci	r23, 0xFF	; 255
 aa4:	8f 4f       	sbci	r24, 0xFF	; 255
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	16 c0       	rjmp	.+44     	; 0xad6 <__floatsisf+0x6c>
 aaa:	88 23       	and	r24, r24
 aac:	11 f0       	breq	.+4      	; 0xab2 <__floatsisf+0x48>
 aae:	96 e9       	ldi	r25, 0x96	; 150
 ab0:	11 c0       	rjmp	.+34     	; 0xad4 <__floatsisf+0x6a>
 ab2:	77 23       	and	r23, r23
 ab4:	21 f0       	breq	.+8      	; 0xabe <__floatsisf+0x54>
 ab6:	9e e8       	ldi	r25, 0x8E	; 142
 ab8:	87 2f       	mov	r24, r23
 aba:	76 2f       	mov	r23, r22
 abc:	05 c0       	rjmp	.+10     	; 0xac8 <__floatsisf+0x5e>
 abe:	66 23       	and	r22, r22
 ac0:	71 f0       	breq	.+28     	; 0xade <__floatsisf+0x74>
 ac2:	96 e8       	ldi	r25, 0x86	; 134
 ac4:	86 2f       	mov	r24, r22
 ac6:	70 e0       	ldi	r23, 0x00	; 0
 ac8:	60 e0       	ldi	r22, 0x00	; 0
 aca:	2a f0       	brmi	.+10     	; 0xad6 <__floatsisf+0x6c>
 acc:	9a 95       	dec	r25
 ace:	66 0f       	add	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	da f7       	brpl	.-10     	; 0xacc <__floatsisf+0x62>
 ad6:	88 0f       	add	r24, r24
 ad8:	96 95       	lsr	r25
 ada:	87 95       	ror	r24
 adc:	97 f9       	bld	r25, 7
 ade:	08 95       	ret

00000ae0 <__fp_split3>:
 ae0:	57 fd       	sbrc	r21, 7
 ae2:	90 58       	subi	r25, 0x80	; 128
 ae4:	44 0f       	add	r20, r20
 ae6:	55 1f       	adc	r21, r21
 ae8:	59 f0       	breq	.+22     	; 0xb00 <__fp_splitA+0x10>
 aea:	5f 3f       	cpi	r21, 0xFF	; 255
 aec:	71 f0       	breq	.+28     	; 0xb0a <__fp_splitA+0x1a>
 aee:	47 95       	ror	r20

00000af0 <__fp_splitA>:
 af0:	88 0f       	add	r24, r24
 af2:	97 fb       	bst	r25, 7
 af4:	99 1f       	adc	r25, r25
 af6:	61 f0       	breq	.+24     	; 0xb10 <__fp_splitA+0x20>
 af8:	9f 3f       	cpi	r25, 0xFF	; 255
 afa:	79 f0       	breq	.+30     	; 0xb1a <__fp_splitA+0x2a>
 afc:	87 95       	ror	r24
 afe:	08 95       	ret
 b00:	12 16       	cp	r1, r18
 b02:	13 06       	cpc	r1, r19
 b04:	14 06       	cpc	r1, r20
 b06:	55 1f       	adc	r21, r21
 b08:	f2 cf       	rjmp	.-28     	; 0xaee <__fp_split3+0xe>
 b0a:	46 95       	lsr	r20
 b0c:	f1 df       	rcall	.-30     	; 0xaf0 <__fp_splitA>
 b0e:	08 c0       	rjmp	.+16     	; 0xb20 <__fp_splitA+0x30>
 b10:	16 16       	cp	r1, r22
 b12:	17 06       	cpc	r1, r23
 b14:	18 06       	cpc	r1, r24
 b16:	99 1f       	adc	r25, r25
 b18:	f1 cf       	rjmp	.-30     	; 0xafc <__fp_splitA+0xc>
 b1a:	86 95       	lsr	r24
 b1c:	71 05       	cpc	r23, r1
 b1e:	61 05       	cpc	r22, r1
 b20:	08 94       	sec
 b22:	08 95       	ret

00000b24 <__fp_zero>:
 b24:	e8 94       	clt

00000b26 <__fp_szero>:
 b26:	bb 27       	eor	r27, r27
 b28:	66 27       	eor	r22, r22
 b2a:	77 27       	eor	r23, r23
 b2c:	cb 01       	movw	r24, r22
 b2e:	97 f9       	bld	r25, 7
 b30:	08 95       	ret

00000b32 <__mulsf3>:
 b32:	0b d0       	rcall	.+22     	; 0xb4a <__mulsf3x>
 b34:	78 c0       	rjmp	.+240    	; 0xc26 <__fp_round>
 b36:	69 d0       	rcall	.+210    	; 0xc0a <__fp_pscA>
 b38:	28 f0       	brcs	.+10     	; 0xb44 <__mulsf3+0x12>
 b3a:	6e d0       	rcall	.+220    	; 0xc18 <__fp_pscB>
 b3c:	18 f0       	brcs	.+6      	; 0xb44 <__mulsf3+0x12>
 b3e:	95 23       	and	r25, r21
 b40:	09 f0       	breq	.+2      	; 0xb44 <__mulsf3+0x12>
 b42:	5a c0       	rjmp	.+180    	; 0xbf8 <__fp_inf>
 b44:	5f c0       	rjmp	.+190    	; 0xc04 <__fp_nan>
 b46:	11 24       	eor	r1, r1
 b48:	ee cf       	rjmp	.-36     	; 0xb26 <__fp_szero>

00000b4a <__mulsf3x>:
 b4a:	ca df       	rcall	.-108    	; 0xae0 <__fp_split3>
 b4c:	a0 f3       	brcs	.-24     	; 0xb36 <__mulsf3+0x4>

00000b4e <__mulsf3_pse>:
 b4e:	95 9f       	mul	r25, r21
 b50:	d1 f3       	breq	.-12     	; 0xb46 <__mulsf3+0x14>
 b52:	95 0f       	add	r25, r21
 b54:	50 e0       	ldi	r21, 0x00	; 0
 b56:	55 1f       	adc	r21, r21
 b58:	62 9f       	mul	r22, r18
 b5a:	f0 01       	movw	r30, r0
 b5c:	72 9f       	mul	r23, r18
 b5e:	bb 27       	eor	r27, r27
 b60:	f0 0d       	add	r31, r0
 b62:	b1 1d       	adc	r27, r1
 b64:	63 9f       	mul	r22, r19
 b66:	aa 27       	eor	r26, r26
 b68:	f0 0d       	add	r31, r0
 b6a:	b1 1d       	adc	r27, r1
 b6c:	aa 1f       	adc	r26, r26
 b6e:	64 9f       	mul	r22, r20
 b70:	66 27       	eor	r22, r22
 b72:	b0 0d       	add	r27, r0
 b74:	a1 1d       	adc	r26, r1
 b76:	66 1f       	adc	r22, r22
 b78:	82 9f       	mul	r24, r18
 b7a:	22 27       	eor	r18, r18
 b7c:	b0 0d       	add	r27, r0
 b7e:	a1 1d       	adc	r26, r1
 b80:	62 1f       	adc	r22, r18
 b82:	73 9f       	mul	r23, r19
 b84:	b0 0d       	add	r27, r0
 b86:	a1 1d       	adc	r26, r1
 b88:	62 1f       	adc	r22, r18
 b8a:	83 9f       	mul	r24, r19
 b8c:	a0 0d       	add	r26, r0
 b8e:	61 1d       	adc	r22, r1
 b90:	22 1f       	adc	r18, r18
 b92:	74 9f       	mul	r23, r20
 b94:	33 27       	eor	r19, r19
 b96:	a0 0d       	add	r26, r0
 b98:	61 1d       	adc	r22, r1
 b9a:	23 1f       	adc	r18, r19
 b9c:	84 9f       	mul	r24, r20
 b9e:	60 0d       	add	r22, r0
 ba0:	21 1d       	adc	r18, r1
 ba2:	82 2f       	mov	r24, r18
 ba4:	76 2f       	mov	r23, r22
 ba6:	6a 2f       	mov	r22, r26
 ba8:	11 24       	eor	r1, r1
 baa:	9f 57       	subi	r25, 0x7F	; 127
 bac:	50 40       	sbci	r21, 0x00	; 0
 bae:	8a f0       	brmi	.+34     	; 0xbd2 <__mulsf3_pse+0x84>
 bb0:	e1 f0       	breq	.+56     	; 0xbea <__mulsf3_pse+0x9c>
 bb2:	88 23       	and	r24, r24
 bb4:	4a f0       	brmi	.+18     	; 0xbc8 <__mulsf3_pse+0x7a>
 bb6:	ee 0f       	add	r30, r30
 bb8:	ff 1f       	adc	r31, r31
 bba:	bb 1f       	adc	r27, r27
 bbc:	66 1f       	adc	r22, r22
 bbe:	77 1f       	adc	r23, r23
 bc0:	88 1f       	adc	r24, r24
 bc2:	91 50       	subi	r25, 0x01	; 1
 bc4:	50 40       	sbci	r21, 0x00	; 0
 bc6:	a9 f7       	brne	.-22     	; 0xbb2 <__mulsf3_pse+0x64>
 bc8:	9e 3f       	cpi	r25, 0xFE	; 254
 bca:	51 05       	cpc	r21, r1
 bcc:	70 f0       	brcs	.+28     	; 0xbea <__mulsf3_pse+0x9c>
 bce:	14 c0       	rjmp	.+40     	; 0xbf8 <__fp_inf>
 bd0:	aa cf       	rjmp	.-172    	; 0xb26 <__fp_szero>
 bd2:	5f 3f       	cpi	r21, 0xFF	; 255
 bd4:	ec f3       	brlt	.-6      	; 0xbd0 <__mulsf3_pse+0x82>
 bd6:	98 3e       	cpi	r25, 0xE8	; 232
 bd8:	dc f3       	brlt	.-10     	; 0xbd0 <__mulsf3_pse+0x82>
 bda:	86 95       	lsr	r24
 bdc:	77 95       	ror	r23
 bde:	67 95       	ror	r22
 be0:	b7 95       	ror	r27
 be2:	f7 95       	ror	r31
 be4:	e7 95       	ror	r30
 be6:	9f 5f       	subi	r25, 0xFF	; 255
 be8:	c1 f7       	brne	.-16     	; 0xbda <__mulsf3_pse+0x8c>
 bea:	fe 2b       	or	r31, r30
 bec:	88 0f       	add	r24, r24
 bee:	91 1d       	adc	r25, r1
 bf0:	96 95       	lsr	r25
 bf2:	87 95       	ror	r24
 bf4:	97 f9       	bld	r25, 7
 bf6:	08 95       	ret

00000bf8 <__fp_inf>:
 bf8:	97 f9       	bld	r25, 7
 bfa:	9f 67       	ori	r25, 0x7F	; 127
 bfc:	80 e8       	ldi	r24, 0x80	; 128
 bfe:	70 e0       	ldi	r23, 0x00	; 0
 c00:	60 e0       	ldi	r22, 0x00	; 0
 c02:	08 95       	ret

00000c04 <__fp_nan>:
 c04:	9f ef       	ldi	r25, 0xFF	; 255
 c06:	80 ec       	ldi	r24, 0xC0	; 192
 c08:	08 95       	ret

00000c0a <__fp_pscA>:
 c0a:	00 24       	eor	r0, r0
 c0c:	0a 94       	dec	r0
 c0e:	16 16       	cp	r1, r22
 c10:	17 06       	cpc	r1, r23
 c12:	18 06       	cpc	r1, r24
 c14:	09 06       	cpc	r0, r25
 c16:	08 95       	ret

00000c18 <__fp_pscB>:
 c18:	00 24       	eor	r0, r0
 c1a:	0a 94       	dec	r0
 c1c:	12 16       	cp	r1, r18
 c1e:	13 06       	cpc	r1, r19
 c20:	14 06       	cpc	r1, r20
 c22:	05 06       	cpc	r0, r21
 c24:	08 95       	ret

00000c26 <__fp_round>:
 c26:	09 2e       	mov	r0, r25
 c28:	03 94       	inc	r0
 c2a:	00 0c       	add	r0, r0
 c2c:	11 f4       	brne	.+4      	; 0xc32 <__fp_round+0xc>
 c2e:	88 23       	and	r24, r24
 c30:	52 f0       	brmi	.+20     	; 0xc46 <__fp_round+0x20>
 c32:	bb 0f       	add	r27, r27
 c34:	40 f4       	brcc	.+16     	; 0xc46 <__fp_round+0x20>
 c36:	bf 2b       	or	r27, r31
 c38:	11 f4       	brne	.+4      	; 0xc3e <__fp_round+0x18>
 c3a:	60 ff       	sbrs	r22, 0
 c3c:	04 c0       	rjmp	.+8      	; 0xc46 <__fp_round+0x20>
 c3e:	6f 5f       	subi	r22, 0xFF	; 255
 c40:	7f 4f       	sbci	r23, 0xFF	; 255
 c42:	8f 4f       	sbci	r24, 0xFF	; 255
 c44:	9f 4f       	sbci	r25, 0xFF	; 255
 c46:	08 95       	ret

00000c48 <__udivmodhi4>:
 c48:	aa 1b       	sub	r26, r26
 c4a:	bb 1b       	sub	r27, r27
 c4c:	51 e1       	ldi	r21, 0x11	; 17
 c4e:	07 c0       	rjmp	.+14     	; 0xc5e <__udivmodhi4_ep>

00000c50 <__udivmodhi4_loop>:
 c50:	aa 1f       	adc	r26, r26
 c52:	bb 1f       	adc	r27, r27
 c54:	a6 17       	cp	r26, r22
 c56:	b7 07       	cpc	r27, r23
 c58:	10 f0       	brcs	.+4      	; 0xc5e <__udivmodhi4_ep>
 c5a:	a6 1b       	sub	r26, r22
 c5c:	b7 0b       	sbc	r27, r23

00000c5e <__udivmodhi4_ep>:
 c5e:	88 1f       	adc	r24, r24
 c60:	99 1f       	adc	r25, r25
 c62:	5a 95       	dec	r21
 c64:	a9 f7       	brne	.-22     	; 0xc50 <__udivmodhi4_loop>
 c66:	80 95       	com	r24
 c68:	90 95       	com	r25
 c6a:	bc 01       	movw	r22, r24
 c6c:	cd 01       	movw	r24, r26
 c6e:	08 95       	ret

00000c70 <_exit>:
 c70:	f8 94       	cli

00000c72 <__stop_program>:
 c72:	ff cf       	rjmp	.-2      	; 0xc72 <__stop_program>
