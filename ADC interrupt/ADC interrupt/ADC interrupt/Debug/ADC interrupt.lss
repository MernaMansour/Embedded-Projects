
ADC interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000060c  00000680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c8  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e9  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b4  00000000  00000000  00001a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00002020  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021d  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004da  00000000  00000000  000023bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  8a:	0c 94 04 03 	jmp	0x608	; 0x608 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
#include <avr/io.h>
#include "macro.h"

void ADC_init(void)
{
	SET_BIT(ADMUX,REFS0); //reference voltage ---AVCC=5v
  92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADCSRA,ADEN);//enable adc
  94:	37 9a       	sbi	0x06, 7	; 6
	SET_BIT(ADCSRA,ADPS2);
  96:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);// division factor 64 --> frequency 125KHZ
  98:	31 9a       	sbi	0x06, 1	; 6
	
}
  9a:	08 95       	ret

0000009c <ADC_read>:
unsigned short ADC_read(void)
{
	unsigned short read_val;
	SET_BIT(ADCSRA,ADSC);
  9c:	36 9a       	sbi	0x06, 6	; 6
	while(READ_BIT(ADCSRA,ADIF)==0);
  9e:	34 9b       	sbis	0x06, 4	; 6
  a0:	fe cf       	rjmp	.-4      	; 0x9e <ADC_read+0x2>
	//while(IS_BIT_CLR(ADCSRA,ADIF));// if bit ADIF=0 ---> condition is true ...> return 1 till it becomes 1 it exist from loop
	SET_BIT(ADCSRA,ADIF);//clear bit
  a2:	34 9a       	sbi	0x06, 4	; 6
	read_val=(ADCL);
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);
  a8:	45 b1       	in	r20, 0x05	; 5
  aa:	34 2f       	mov	r19, r20
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	82 2b       	or	r24, r18
  b0:	93 2b       	or	r25, r19
	return read_val; 
  b2:	08 95       	ret

000000b4 <main>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include "macro.h"
int main(void)
{ 
	ADC_init();
  b4:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	sei();
  b8:	78 94       	sei
	SET_BIT(ADCSRA,ADIE);
  ba:	33 9a       	sbi	0x06, 3	; 6
	led_init('D',0);
  bc:	84 e4       	ldi	r24, 0x44	; 68
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <led_init>
	led_init('D',1);
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <led_init>
    while(1)
    {
       SET_BIT(ADCSRA,ADSC);
	   _delay_ms(0.5);
	   PORTD=0x02;
  cc:	82 e0       	ldi	r24, 0x02	; 2
	SET_BIT(ADCSRA,ADIE);
	led_init('D',0);
	led_init('D',1);
    while(1)
    {
       SET_BIT(ADCSRA,ADSC);
  ce:	36 9a       	sbi	0x06, 6	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	e7 ee       	ldi	r30, 0xE7	; 231
  d2:	f3 e0       	ldi	r31, 0x03	; 3
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x20>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x26>
  da:	00 00       	nop
	   _delay_ms(0.5);
	   PORTD=0x02;
  dc:	82 bb       	out	0x12, r24	; 18
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	39 e6       	ldi	r19, 0x69	; 105
  e2:	48 e1       	ldi	r20, 0x18	; 24
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	30 40       	sbci	r19, 0x00	; 0
  e8:	40 40       	sbci	r20, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x30>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x3a>
  ee:	00 00       	nop
  f0:	ee cf       	rjmp	.-36     	; 0xce <main+0x1a>

000000f2 <__vector_16>:
	   _delay_ms(1000);// on led 1 off led2 
     }
}
ISR(ADC_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
	PORTD=0x01;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	82 bb       	out	0x12, r24	; 18
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	99 e6       	ldi	r25, 0x69	; 105
 10c:	a8 e1       	ldi	r26, 0x18	; 24
 10e:	81 50       	subi	r24, 0x01	; 1
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	a0 40       	sbci	r26, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <__vector_16+0x1c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__vector_16+0x26>
 118:	00 00       	nop
	_delay_ms(1000);//on led 2 off led 1
 11a:	bf 91       	pop	r27
 11c:	af 91       	pop	r26
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <DIO_SET_PIN_DIR>:
#include "macro.h"


void DIO_SET_PIN_DIR(char port, char pin, char dir)
{
	switch(port)
 12c:	84 34       	cpi	r24, 0x44	; 68
 12e:	09 f4       	brne	.+2      	; 0x132 <DIO_SET_PIN_DIR+0x6>
 130:	71 c0       	rjmp	.+226    	; 0x214 <DIO_SET_PIN_DIR+0xe8>
 132:	85 34       	cpi	r24, 0x45	; 69
 134:	48 f4       	brcc	.+18     	; 0x148 <DIO_SET_PIN_DIR+0x1c>
 136:	82 34       	cpi	r24, 0x42	; 66
 138:	99 f1       	breq	.+102    	; 0x1a0 <DIO_SET_PIN_DIR+0x74>
 13a:	83 34       	cpi	r24, 0x43	; 67
 13c:	08 f0       	brcs	.+2      	; 0x140 <DIO_SET_PIN_DIR+0x14>
 13e:	4d c0       	rjmp	.+154    	; 0x1da <DIO_SET_PIN_DIR+0xae>
 140:	81 34       	cpi	r24, 0x41	; 65
 142:	09 f0       	breq	.+2      	; 0x146 <DIO_SET_PIN_DIR+0x1a>
 144:	83 c0       	rjmp	.+262    	; 0x24c <DIO_SET_PIN_DIR+0x120>
 146:	0f c0       	rjmp	.+30     	; 0x166 <DIO_SET_PIN_DIR+0x3a>
 148:	82 36       	cpi	r24, 0x62	; 98
 14a:	51 f1       	breq	.+84     	; 0x1a0 <DIO_SET_PIN_DIR+0x74>
 14c:	83 36       	cpi	r24, 0x63	; 99
 14e:	20 f4       	brcc	.+8      	; 0x158 <DIO_SET_PIN_DIR+0x2c>
 150:	81 36       	cpi	r24, 0x61	; 97
 152:	09 f0       	breq	.+2      	; 0x156 <DIO_SET_PIN_DIR+0x2a>
 154:	7b c0       	rjmp	.+246    	; 0x24c <DIO_SET_PIN_DIR+0x120>
 156:	07 c0       	rjmp	.+14     	; 0x166 <DIO_SET_PIN_DIR+0x3a>
 158:	83 36       	cpi	r24, 0x63	; 99
 15a:	09 f4       	brne	.+2      	; 0x15e <DIO_SET_PIN_DIR+0x32>
 15c:	3e c0       	rjmp	.+124    	; 0x1da <DIO_SET_PIN_DIR+0xae>
 15e:	84 36       	cpi	r24, 0x64	; 100
 160:	09 f0       	breq	.+2      	; 0x164 <DIO_SET_PIN_DIR+0x38>
 162:	74 c0       	rjmp	.+232    	; 0x24c <DIO_SET_PIN_DIR+0x120>
 164:	57 c0       	rjmp	.+174    	; 0x214 <DIO_SET_PIN_DIR+0xe8>
	{
		case'A':
		case'a':
		if(dir==1)
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	69 f4       	brne	.+26     	; 0x184 <DIO_SET_PIN_DIR+0x58>
		{
			SET_BIT(DDRA,pin);
 16a:	2a b3       	in	r18, 0x1a	; 26
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	ac 01       	movw	r20, r24
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SET_PIN_DIR+0x4c>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_SET_PIN_DIR+0x48>
 17c:	ba 01       	movw	r22, r20
 17e:	62 2b       	or	r22, r18
 180:	6a bb       	out	0x1a, r22	; 26
 182:	08 95       	ret

        }
		else
		{
			CLR_BIT(DDRA,pin);
 184:	2a b3       	in	r18, 0x1a	; 26
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	ac 01       	movw	r20, r24
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SET_PIN_DIR+0x66>
 18e:	44 0f       	add	r20, r20
 190:	55 1f       	adc	r21, r21
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SET_PIN_DIR+0x62>
 196:	ba 01       	movw	r22, r20
 198:	60 95       	com	r22
 19a:	62 23       	and	r22, r18
 19c:	6a bb       	out	0x1a, r22	; 26
 19e:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(dir==1)
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	69 f4       	brne	.+26     	; 0x1be <DIO_SET_PIN_DIR+0x92>
		{
			SET_BIT(DDRB,pin);
 1a4:	27 b3       	in	r18, 0x17	; 23
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	ac 01       	movw	r20, r24
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SET_PIN_DIR+0x86>
 1ae:	44 0f       	add	r20, r20
 1b0:	55 1f       	adc	r21, r21
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SET_PIN_DIR+0x82>
 1b6:	ba 01       	movw	r22, r20
 1b8:	62 2b       	or	r22, r18
 1ba:	67 bb       	out	0x17, r22	; 23
 1bc:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRB,pin);
 1be:	27 b3       	in	r18, 0x17	; 23
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	ac 01       	movw	r20, r24
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SET_PIN_DIR+0xa0>
 1c8:	44 0f       	add	r20, r20
 1ca:	55 1f       	adc	r21, r21
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SET_PIN_DIR+0x9c>
 1d0:	ba 01       	movw	r22, r20
 1d2:	60 95       	com	r22
 1d4:	62 23       	and	r22, r18
 1d6:	67 bb       	out	0x17, r22	; 23
 1d8:	08 95       	ret
		}
		break;	
		case'C':
		case'c':
		if(dir==1)
 1da:	41 30       	cpi	r20, 0x01	; 1
 1dc:	69 f4       	brne	.+26     	; 0x1f8 <DIO_SET_PIN_DIR+0xcc>
		{
			SET_BIT(DDRC,pin);
 1de:	24 b3       	in	r18, 0x14	; 20
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	ac 01       	movw	r20, r24
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_SET_PIN_DIR+0xc0>
 1e8:	44 0f       	add	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_SET_PIN_DIR+0xbc>
 1f0:	ba 01       	movw	r22, r20
 1f2:	62 2b       	or	r22, r18
 1f4:	64 bb       	out	0x14, r22	; 20
 1f6:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRC,pin);
 1f8:	24 b3       	in	r18, 0x14	; 20
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	ac 01       	movw	r20, r24
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_SET_PIN_DIR+0xda>
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_SET_PIN_DIR+0xd6>
 20a:	ba 01       	movw	r22, r20
 20c:	60 95       	com	r22
 20e:	62 23       	and	r22, r18
 210:	64 bb       	out	0x14, r22	; 20
 212:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(dir==1)
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	69 f4       	brne	.+26     	; 0x232 <DIO_SET_PIN_DIR+0x106>
		{
			SET_BIT(DDRD,pin);
 218:	21 b3       	in	r18, 0x11	; 17
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	ac 01       	movw	r20, r24
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_SET_PIN_DIR+0xfa>
 222:	44 0f       	add	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_SET_PIN_DIR+0xf6>
 22a:	ba 01       	movw	r22, r20
 22c:	62 2b       	or	r22, r18
 22e:	61 bb       	out	0x11, r22	; 17
 230:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRD,pin);
 232:	21 b3       	in	r18, 0x11	; 17
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	ac 01       	movw	r20, r24
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_SET_PIN_DIR+0x114>
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_SET_PIN_DIR+0x110>
 244:	ba 01       	movw	r22, r20
 246:	60 95       	com	r22
 248:	62 23       	and	r22, r18
 24a:	61 bb       	out	0x11, r22	; 17
 24c:	08 95       	ret

0000024e <DIO_WRITE_PIN>:
		break;
	}
}
void DIO_WRITE_PIN(char port,char pin, char val)
{
	switch(port)
 24e:	84 34       	cpi	r24, 0x44	; 68
 250:	09 f4       	brne	.+2      	; 0x254 <DIO_WRITE_PIN+0x6>
 252:	71 c0       	rjmp	.+226    	; 0x336 <DIO_WRITE_PIN+0xe8>
 254:	85 34       	cpi	r24, 0x45	; 69
 256:	48 f4       	brcc	.+18     	; 0x26a <DIO_WRITE_PIN+0x1c>
 258:	82 34       	cpi	r24, 0x42	; 66
 25a:	99 f1       	breq	.+102    	; 0x2c2 <DIO_WRITE_PIN+0x74>
 25c:	83 34       	cpi	r24, 0x43	; 67
 25e:	08 f0       	brcs	.+2      	; 0x262 <DIO_WRITE_PIN+0x14>
 260:	4d c0       	rjmp	.+154    	; 0x2fc <DIO_WRITE_PIN+0xae>
 262:	81 34       	cpi	r24, 0x41	; 65
 264:	09 f0       	breq	.+2      	; 0x268 <DIO_WRITE_PIN+0x1a>
 266:	83 c0       	rjmp	.+262    	; 0x36e <DIO_WRITE_PIN+0x120>
 268:	0f c0       	rjmp	.+30     	; 0x288 <DIO_WRITE_PIN+0x3a>
 26a:	82 36       	cpi	r24, 0x62	; 98
 26c:	51 f1       	breq	.+84     	; 0x2c2 <DIO_WRITE_PIN+0x74>
 26e:	83 36       	cpi	r24, 0x63	; 99
 270:	20 f4       	brcc	.+8      	; 0x27a <DIO_WRITE_PIN+0x2c>
 272:	81 36       	cpi	r24, 0x61	; 97
 274:	09 f0       	breq	.+2      	; 0x278 <DIO_WRITE_PIN+0x2a>
 276:	7b c0       	rjmp	.+246    	; 0x36e <DIO_WRITE_PIN+0x120>
 278:	07 c0       	rjmp	.+14     	; 0x288 <DIO_WRITE_PIN+0x3a>
 27a:	83 36       	cpi	r24, 0x63	; 99
 27c:	09 f4       	brne	.+2      	; 0x280 <DIO_WRITE_PIN+0x32>
 27e:	3e c0       	rjmp	.+124    	; 0x2fc <DIO_WRITE_PIN+0xae>
 280:	84 36       	cpi	r24, 0x64	; 100
 282:	09 f0       	breq	.+2      	; 0x286 <DIO_WRITE_PIN+0x38>
 284:	74 c0       	rjmp	.+232    	; 0x36e <DIO_WRITE_PIN+0x120>
 286:	57 c0       	rjmp	.+174    	; 0x336 <DIO_WRITE_PIN+0xe8>
	{
		case'A':
		case'a':
		if(val==1)
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	69 f4       	brne	.+26     	; 0x2a6 <DIO_WRITE_PIN+0x58>
		{
			SET_BIT(PORTA,pin);
 28c:	2b b3       	in	r18, 0x1b	; 27
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	ac 01       	movw	r20, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_WRITE_PIN+0x4c>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_WRITE_PIN+0x48>
 29e:	ba 01       	movw	r22, r20
 2a0:	62 2b       	or	r22, r18
 2a2:	6b bb       	out	0x1b, r22	; 27
 2a4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 2a6:	2b b3       	in	r18, 0x1b	; 27
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ac 01       	movw	r20, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_WRITE_PIN+0x66>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_WRITE_PIN+0x62>
 2b8:	ba 01       	movw	r22, r20
 2ba:	60 95       	com	r22
 2bc:	62 23       	and	r22, r18
 2be:	6b bb       	out	0x1b, r22	; 27
 2c0:	08 95       	ret
		}
		break;	
			case'B':
			case'b':
			if(val==1)
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	69 f4       	brne	.+26     	; 0x2e0 <DIO_WRITE_PIN+0x92>
			{
				SET_BIT(PORTB,pin);
 2c6:	28 b3       	in	r18, 0x18	; 24
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_WRITE_PIN+0x86>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_WRITE_PIN+0x82>
 2d8:	ba 01       	movw	r22, r20
 2da:	62 2b       	or	r22, r18
 2dc:	68 bb       	out	0x18, r22	; 24
 2de:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,pin);
 2e0:	28 b3       	in	r18, 0x18	; 24
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	ac 01       	movw	r20, r24
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_WRITE_PIN+0xa0>
 2ea:	44 0f       	add	r20, r20
 2ec:	55 1f       	adc	r21, r21
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_WRITE_PIN+0x9c>
 2f2:	ba 01       	movw	r22, r20
 2f4:	60 95       	com	r22
 2f6:	62 23       	and	r22, r18
 2f8:	68 bb       	out	0x18, r22	; 24
 2fa:	08 95       	ret
			}
			break;	
			case'C':
			case'c':
			if(val==1)
 2fc:	41 30       	cpi	r20, 0x01	; 1
 2fe:	69 f4       	brne	.+26     	; 0x31a <DIO_WRITE_PIN+0xcc>
			{
				SET_BIT(PORTC,pin);
 300:	25 b3       	in	r18, 0x15	; 21
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	ac 01       	movw	r20, r24
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_WRITE_PIN+0xc0>
 30a:	44 0f       	add	r20, r20
 30c:	55 1f       	adc	r21, r21
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_WRITE_PIN+0xbc>
 312:	ba 01       	movw	r22, r20
 314:	62 2b       	or	r22, r18
 316:	65 bb       	out	0x15, r22	; 21
 318:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,pin);
 31a:	25 b3       	in	r18, 0x15	; 21
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	ac 01       	movw	r20, r24
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_WRITE_PIN+0xda>
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_WRITE_PIN+0xd6>
 32c:	ba 01       	movw	r22, r20
 32e:	60 95       	com	r22
 330:	62 23       	and	r22, r18
 332:	65 bb       	out	0x15, r22	; 21
 334:	08 95       	ret
			}
			break;	
				case'D':
				case'd':
				if(val==1)
 336:	41 30       	cpi	r20, 0x01	; 1
 338:	69 f4       	brne	.+26     	; 0x354 <DIO_WRITE_PIN+0x106>
				{
					SET_BIT(PORTD,pin);
 33a:	22 b3       	in	r18, 0x12	; 18
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	ac 01       	movw	r20, r24
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_WRITE_PIN+0xfa>
 344:	44 0f       	add	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_WRITE_PIN+0xf6>
 34c:	ba 01       	movw	r22, r20
 34e:	62 2b       	or	r22, r18
 350:	62 bb       	out	0x12, r22	; 18
 352:	08 95       	ret
				}
				else
				{
					CLR_BIT(PORTD,pin);
 354:	22 b3       	in	r18, 0x12	; 18
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	ac 01       	movw	r20, r24
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_WRITE_PIN+0x114>
 35e:	44 0f       	add	r20, r20
 360:	55 1f       	adc	r21, r21
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_WRITE_PIN+0x110>
 366:	ba 01       	movw	r22, r20
 368:	60 95       	com	r22
 36a:	62 23       	and	r22, r18
 36c:	62 bb       	out	0x12, r22	; 18
 36e:	08 95       	ret

00000370 <DIO_TOGGLE_PIN>:
				break;
	}
}					
void DIO_TOGGLE_PIN(char port,char pin)
{
	switch(port)
 370:	84 34       	cpi	r24, 0x44	; 68
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_TOGGLE_PIN+0x6>
 374:	3d c0       	rjmp	.+122    	; 0x3f0 <DIO_TOGGLE_PIN+0x80>
 376:	85 34       	cpi	r24, 0x45	; 69
 378:	40 f4       	brcc	.+16     	; 0x38a <DIO_TOGGLE_PIN+0x1a>
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	f9 f0       	breq	.+62     	; 0x3bc <DIO_TOGGLE_PIN+0x4c>
 37e:	83 34       	cpi	r24, 0x43	; 67
 380:	50 f5       	brcc	.+84     	; 0x3d6 <DIO_TOGGLE_PIN+0x66>
 382:	81 34       	cpi	r24, 0x41	; 65
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_TOGGLE_PIN+0x18>
 386:	40 c0       	rjmp	.+128    	; 0x408 <DIO_TOGGLE_PIN+0x98>
 388:	0c c0       	rjmp	.+24     	; 0x3a2 <DIO_TOGGLE_PIN+0x32>
 38a:	82 36       	cpi	r24, 0x62	; 98
 38c:	b9 f0       	breq	.+46     	; 0x3bc <DIO_TOGGLE_PIN+0x4c>
 38e:	83 36       	cpi	r24, 0x63	; 99
 390:	18 f4       	brcc	.+6      	; 0x398 <DIO_TOGGLE_PIN+0x28>
 392:	81 36       	cpi	r24, 0x61	; 97
 394:	c9 f5       	brne	.+114    	; 0x408 <DIO_TOGGLE_PIN+0x98>
 396:	05 c0       	rjmp	.+10     	; 0x3a2 <DIO_TOGGLE_PIN+0x32>
 398:	83 36       	cpi	r24, 0x63	; 99
 39a:	e9 f0       	breq	.+58     	; 0x3d6 <DIO_TOGGLE_PIN+0x66>
 39c:	84 36       	cpi	r24, 0x64	; 100
 39e:	a1 f5       	brne	.+104    	; 0x408 <DIO_TOGGLE_PIN+0x98>
 3a0:	27 c0       	rjmp	.+78     	; 0x3f0 <DIO_TOGGLE_PIN+0x80>
	{
		case'A':
		case'a':
		TOG_BIT(PORTA,pin);
 3a2:	2b b3       	in	r18, 0x1b	; 27
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	ac 01       	movw	r20, r24
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_TOGGLE_PIN+0x40>
 3ac:	44 0f       	add	r20, r20
 3ae:	55 1f       	adc	r21, r21
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_TOGGLE_PIN+0x3c>
 3b4:	ba 01       	movw	r22, r20
 3b6:	62 27       	eor	r22, r18
 3b8:	6b bb       	out	0x1b, r22	; 27
		break;
 3ba:	08 95       	ret
		case'B':
		case'b':
		TOG_BIT(PORTB,pin);
 3bc:	28 b3       	in	r18, 0x18	; 24
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	ac 01       	movw	r20, r24
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_TOGGLE_PIN+0x5a>
 3c6:	44 0f       	add	r20, r20
 3c8:	55 1f       	adc	r21, r21
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_TOGGLE_PIN+0x56>
 3ce:	ba 01       	movw	r22, r20
 3d0:	62 27       	eor	r22, r18
 3d2:	68 bb       	out	0x18, r22	; 24
		break;
 3d4:	08 95       	ret
		case'C':
		case'c':
		TOG_BIT(PORTC,pin);
 3d6:	25 b3       	in	r18, 0x15	; 21
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	ac 01       	movw	r20, r24
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_TOGGLE_PIN+0x74>
 3e0:	44 0f       	add	r20, r20
 3e2:	55 1f       	adc	r21, r21
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_TOGGLE_PIN+0x70>
 3e8:	ba 01       	movw	r22, r20
 3ea:	62 27       	eor	r22, r18
 3ec:	65 bb       	out	0x15, r22	; 21
		break;
 3ee:	08 95       	ret
		case'D':
		case'd':
		TOG_BIT(PORTD,pin);
 3f0:	22 b3       	in	r18, 0x12	; 18
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	ac 01       	movw	r20, r24
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_TOGGLE_PIN+0x8e>
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_TOGGLE_PIN+0x8a>
 402:	ba 01       	movw	r22, r20
 404:	62 27       	eor	r22, r18
 406:	62 bb       	out	0x12, r22	; 18
 408:	08 95       	ret

0000040a <DIO_READ_PIN>:
	}
}
char DIO_READ_PIN(char port,char pin)
{
	unsigned char value;
	switch(port)
 40a:	84 34       	cpi	r24, 0x44	; 68
 40c:	09 f4       	brne	.+2      	; 0x410 <DIO_READ_PIN+0x6>
 40e:	51 c0       	rjmp	.+162    	; 0x4b2 <DIO_READ_PIN+0xa8>
 410:	85 34       	cpi	r24, 0x45	; 69
 412:	40 f4       	brcc	.+16     	; 0x424 <DIO_READ_PIN+0x1a>
 414:	82 34       	cpi	r24, 0x42	; 66
 416:	39 f1       	breq	.+78     	; 0x466 <DIO_READ_PIN+0x5c>
 418:	83 34       	cpi	r24, 0x43	; 67
 41a:	c0 f5       	brcc	.+112    	; 0x48c <DIO_READ_PIN+0x82>
 41c:	81 34       	cpi	r24, 0x41	; 65
 41e:	09 f0       	breq	.+2      	; 0x422 <DIO_READ_PIN+0x18>
 420:	5a c0       	rjmp	.+180    	; 0x4d6 <DIO_READ_PIN+0xcc>
 422:	0e c0       	rjmp	.+28     	; 0x440 <DIO_READ_PIN+0x36>
 424:	82 36       	cpi	r24, 0x62	; 98
 426:	f9 f0       	breq	.+62     	; 0x466 <DIO_READ_PIN+0x5c>
 428:	83 36       	cpi	r24, 0x63	; 99
 42a:	20 f4       	brcc	.+8      	; 0x434 <DIO_READ_PIN+0x2a>
 42c:	81 36       	cpi	r24, 0x61	; 97
 42e:	09 f0       	breq	.+2      	; 0x432 <DIO_READ_PIN+0x28>
 430:	52 c0       	rjmp	.+164    	; 0x4d6 <DIO_READ_PIN+0xcc>
 432:	06 c0       	rjmp	.+12     	; 0x440 <DIO_READ_PIN+0x36>
 434:	83 36       	cpi	r24, 0x63	; 99
 436:	51 f1       	breq	.+84     	; 0x48c <DIO_READ_PIN+0x82>
 438:	84 36       	cpi	r24, 0x64	; 100
 43a:	09 f0       	breq	.+2      	; 0x43e <DIO_READ_PIN+0x34>
 43c:	4c c0       	rjmp	.+152    	; 0x4d6 <DIO_READ_PIN+0xcc>
 43e:	39 c0       	rjmp	.+114    	; 0x4b2 <DIO_READ_PIN+0xa8>
	{
	case'A':
	case'a':
	value=READ_BIT(PINA,pin);
 440:	29 b3       	in	r18, 0x19	; 25
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	06 2e       	mov	r0, r22
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_READ_PIN+0x44>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_READ_PIN+0x40>
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	82 23       	and	r24, r18
 456:	93 23       	and	r25, r19
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_READ_PIN+0x54>
 45a:	95 95       	asr	r25
 45c:	87 95       	ror	r24
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_READ_PIN+0x50>
 462:	98 2f       	mov	r25, r24
	break;
 464:	38 c0       	rjmp	.+112    	; 0x4d6 <DIO_READ_PIN+0xcc>
	case'B':
	case'b':
	value=READ_BIT(PINB,pin);
 466:	26 b3       	in	r18, 0x16	; 22
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	06 2e       	mov	r0, r22
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_READ_PIN+0x6a>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	0a 94       	dec	r0
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_READ_PIN+0x66>
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	82 23       	and	r24, r18
 47c:	93 23       	and	r25, r19
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_READ_PIN+0x7a>
 480:	95 95       	asr	r25
 482:	87 95       	ror	r24
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_READ_PIN+0x76>
 488:	98 2f       	mov	r25, r24
	break;
 48a:	25 c0       	rjmp	.+74     	; 0x4d6 <DIO_READ_PIN+0xcc>
	case'C':
	case'c':
	value=READ_BIT(PINC,pin);
 48c:	23 b3       	in	r18, 0x13	; 19
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	06 2e       	mov	r0, r22
 494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_READ_PIN+0x90>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	0a 94       	dec	r0
 49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_READ_PIN+0x8c>
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	82 23       	and	r24, r18
 4a2:	93 23       	and	r25, r19
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_READ_PIN+0xa0>
 4a6:	95 95       	asr	r25
 4a8:	87 95       	ror	r24
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_READ_PIN+0x9c>
 4ae:	98 2f       	mov	r25, r24
	break;
 4b0:	12 c0       	rjmp	.+36     	; 0x4d6 <DIO_READ_PIN+0xcc>
	case'D':
	case'd':
	value=READ_BIT(PIND,pin);
 4b2:	20 b3       	in	r18, 0x10	; 16
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	06 2e       	mov	r0, r22
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_READ_PIN+0xb6>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_READ_PIN+0xb2>
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	82 23       	and	r24, r18
 4c8:	93 23       	and	r25, r19
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_READ_PIN+0xc6>
 4cc:	95 95       	asr	r25
 4ce:	87 95       	ror	r24
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_READ_PIN+0xc2>
 4d4:	98 2f       	mov	r25, r24
	break;
	}	
	return value;
}	
 4d6:	89 2f       	mov	r24, r25
 4d8:	08 95       	ret

000004da <DIO_SET_PORT_DIR>:
void DIO_SET_PORT_DIR(char port,char dir)
{
	switch(port)
 4da:	84 34       	cpi	r24, 0x44	; 68
 4dc:	d9 f0       	breq	.+54     	; 0x514 <DIO_SET_PORT_DIR+0x3a>
 4de:	85 34       	cpi	r24, 0x45	; 69
 4e0:	38 f4       	brcc	.+14     	; 0x4f0 <DIO_SET_PORT_DIR+0x16>
 4e2:	82 34       	cpi	r24, 0x42	; 66
 4e4:	99 f0       	breq	.+38     	; 0x50c <DIO_SET_PORT_DIR+0x32>
 4e6:	83 34       	cpi	r24, 0x43	; 67
 4e8:	98 f4       	brcc	.+38     	; 0x510 <DIO_SET_PORT_DIR+0x36>
 4ea:	81 34       	cpi	r24, 0x41	; 65
 4ec:	a1 f4       	brne	.+40     	; 0x516 <DIO_SET_PORT_DIR+0x3c>
 4ee:	0c c0       	rjmp	.+24     	; 0x508 <DIO_SET_PORT_DIR+0x2e>
 4f0:	82 36       	cpi	r24, 0x62	; 98
 4f2:	61 f0       	breq	.+24     	; 0x50c <DIO_SET_PORT_DIR+0x32>
 4f4:	83 36       	cpi	r24, 0x63	; 99
 4f6:	18 f4       	brcc	.+6      	; 0x4fe <DIO_SET_PORT_DIR+0x24>
 4f8:	81 36       	cpi	r24, 0x61	; 97
 4fa:	69 f4       	brne	.+26     	; 0x516 <DIO_SET_PORT_DIR+0x3c>
 4fc:	05 c0       	rjmp	.+10     	; 0x508 <DIO_SET_PORT_DIR+0x2e>
 4fe:	83 36       	cpi	r24, 0x63	; 99
 500:	39 f0       	breq	.+14     	; 0x510 <DIO_SET_PORT_DIR+0x36>
 502:	84 36       	cpi	r24, 0x64	; 100
 504:	41 f4       	brne	.+16     	; 0x516 <DIO_SET_PORT_DIR+0x3c>
 506:	06 c0       	rjmp	.+12     	; 0x514 <DIO_SET_PORT_DIR+0x3a>
	{
	case'A':
	case'a':
	DDRA=dir;
 508:	6a bb       	out	0x1a, r22	; 26
	break;
 50a:	08 95       	ret
	case'B':
	case'b':
	DDRB=dir;
 50c:	67 bb       	out	0x17, r22	; 23
	break;
 50e:	08 95       	ret
	case'C':
	case'c':
	DDRC=dir;
 510:	64 bb       	out	0x14, r22	; 20
	break;
 512:	08 95       	ret
	case'D':
	case'd':
	DDRD=dir;
 514:	61 bb       	out	0x11, r22	; 17
 516:	08 95       	ret

00000518 <DIO_WRITE_PORT>:
	break;
	}	
}
void DIO_WRITE_PORT(char port, char val)
{
	switch(port)
 518:	84 34       	cpi	r24, 0x44	; 68
 51a:	d9 f0       	breq	.+54     	; 0x552 <DIO_WRITE_PORT+0x3a>
 51c:	85 34       	cpi	r24, 0x45	; 69
 51e:	38 f4       	brcc	.+14     	; 0x52e <DIO_WRITE_PORT+0x16>
 520:	82 34       	cpi	r24, 0x42	; 66
 522:	99 f0       	breq	.+38     	; 0x54a <DIO_WRITE_PORT+0x32>
 524:	83 34       	cpi	r24, 0x43	; 67
 526:	98 f4       	brcc	.+38     	; 0x54e <DIO_WRITE_PORT+0x36>
 528:	81 34       	cpi	r24, 0x41	; 65
 52a:	a1 f4       	brne	.+40     	; 0x554 <DIO_WRITE_PORT+0x3c>
 52c:	0c c0       	rjmp	.+24     	; 0x546 <DIO_WRITE_PORT+0x2e>
 52e:	82 36       	cpi	r24, 0x62	; 98
 530:	61 f0       	breq	.+24     	; 0x54a <DIO_WRITE_PORT+0x32>
 532:	83 36       	cpi	r24, 0x63	; 99
 534:	18 f4       	brcc	.+6      	; 0x53c <DIO_WRITE_PORT+0x24>
 536:	81 36       	cpi	r24, 0x61	; 97
 538:	69 f4       	brne	.+26     	; 0x554 <DIO_WRITE_PORT+0x3c>
 53a:	05 c0       	rjmp	.+10     	; 0x546 <DIO_WRITE_PORT+0x2e>
 53c:	83 36       	cpi	r24, 0x63	; 99
 53e:	39 f0       	breq	.+14     	; 0x54e <DIO_WRITE_PORT+0x36>
 540:	84 36       	cpi	r24, 0x64	; 100
 542:	41 f4       	brne	.+16     	; 0x554 <DIO_WRITE_PORT+0x3c>
 544:	06 c0       	rjmp	.+12     	; 0x552 <DIO_WRITE_PORT+0x3a>
	{
		case'A':
		case'a':
		PORTA=val;
 546:	6b bb       	out	0x1b, r22	; 27
		break;
 548:	08 95       	ret
		case'B':
		case'b':
		PORTB=val;
 54a:	68 bb       	out	0x18, r22	; 24
		break;
 54c:	08 95       	ret
		case'C':
		case'c':
		PORTC=val;
 54e:	65 bb       	out	0x15, r22	; 21
		break;
 550:	08 95       	ret
		case'D':
		case'd':
		PORTD=val;
 552:	62 bb       	out	0x12, r22	; 18
 554:	08 95       	ret

00000556 <DIO_READ_PORT>:
	}
}
char DIO_READ_PORT(char port)
{
	unsigned char value;
	switch(port)
 556:	84 34       	cpi	r24, 0x44	; 68
 558:	d9 f0       	breq	.+54     	; 0x590 <DIO_READ_PORT+0x3a>
 55a:	85 34       	cpi	r24, 0x45	; 69
 55c:	38 f4       	brcc	.+14     	; 0x56c <DIO_READ_PORT+0x16>
 55e:	82 34       	cpi	r24, 0x42	; 66
 560:	99 f0       	breq	.+38     	; 0x588 <DIO_READ_PORT+0x32>
 562:	83 34       	cpi	r24, 0x43	; 67
 564:	98 f4       	brcc	.+38     	; 0x58c <DIO_READ_PORT+0x36>
 566:	81 34       	cpi	r24, 0x41	; 65
 568:	a1 f4       	brne	.+40     	; 0x592 <DIO_READ_PORT+0x3c>
 56a:	0c c0       	rjmp	.+24     	; 0x584 <DIO_READ_PORT+0x2e>
 56c:	82 36       	cpi	r24, 0x62	; 98
 56e:	61 f0       	breq	.+24     	; 0x588 <DIO_READ_PORT+0x32>
 570:	83 36       	cpi	r24, 0x63	; 99
 572:	18 f4       	brcc	.+6      	; 0x57a <DIO_READ_PORT+0x24>
 574:	81 36       	cpi	r24, 0x61	; 97
 576:	69 f4       	brne	.+26     	; 0x592 <DIO_READ_PORT+0x3c>
 578:	05 c0       	rjmp	.+10     	; 0x584 <DIO_READ_PORT+0x2e>
 57a:	83 36       	cpi	r24, 0x63	; 99
 57c:	39 f0       	breq	.+14     	; 0x58c <DIO_READ_PORT+0x36>
 57e:	84 36       	cpi	r24, 0x64	; 100
 580:	41 f4       	brne	.+16     	; 0x592 <DIO_READ_PORT+0x3c>
 582:	06 c0       	rjmp	.+12     	; 0x590 <DIO_READ_PORT+0x3a>
	{
		case'A':
		case'a':
		value=PINA;
 584:	99 b3       	in	r25, 0x19	; 25
		break;
 586:	05 c0       	rjmp	.+10     	; 0x592 <DIO_READ_PORT+0x3c>
		case'B':
		case'b':
		value=PINB;
 588:	96 b3       	in	r25, 0x16	; 22
		break;
 58a:	03 c0       	rjmp	.+6      	; 0x592 <DIO_READ_PORT+0x3c>
		case'C':
		case'c':
		value=PINC;
 58c:	93 b3       	in	r25, 0x13	; 19
		break;
 58e:	01 c0       	rjmp	.+2      	; 0x592 <DIO_READ_PORT+0x3c>
		case'D':
		case'd':
		value=PIND;
 590:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return value;
}
 592:	89 2f       	mov	r24, r25
 594:	08 95       	ret

00000596 <TOGGLE_PORT>:
void TOGGLE_PORT(char port)
{
	switch(port)
 596:	84 34       	cpi	r24, 0x44	; 68
 598:	09 f1       	breq	.+66     	; 0x5dc <TOGGLE_PORT+0x46>
 59a:	85 34       	cpi	r24, 0x45	; 69
 59c:	38 f4       	brcc	.+14     	; 0x5ac <TOGGLE_PORT+0x16>
 59e:	82 34       	cpi	r24, 0x42	; 66
 5a0:	a9 f0       	breq	.+42     	; 0x5cc <TOGGLE_PORT+0x36>
 5a2:	83 34       	cpi	r24, 0x43	; 67
 5a4:	b8 f4       	brcc	.+46     	; 0x5d4 <TOGGLE_PORT+0x3e>
 5a6:	81 34       	cpi	r24, 0x41	; 65
 5a8:	e1 f4       	brne	.+56     	; 0x5e2 <TOGGLE_PORT+0x4c>
 5aa:	0c c0       	rjmp	.+24     	; 0x5c4 <TOGGLE_PORT+0x2e>
 5ac:	82 36       	cpi	r24, 0x62	; 98
 5ae:	71 f0       	breq	.+28     	; 0x5cc <TOGGLE_PORT+0x36>
 5b0:	83 36       	cpi	r24, 0x63	; 99
 5b2:	18 f4       	brcc	.+6      	; 0x5ba <TOGGLE_PORT+0x24>
 5b4:	81 36       	cpi	r24, 0x61	; 97
 5b6:	a9 f4       	brne	.+42     	; 0x5e2 <TOGGLE_PORT+0x4c>
 5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <TOGGLE_PORT+0x2e>
 5ba:	83 36       	cpi	r24, 0x63	; 99
 5bc:	59 f0       	breq	.+22     	; 0x5d4 <TOGGLE_PORT+0x3e>
 5be:	84 36       	cpi	r24, 0x64	; 100
 5c0:	81 f4       	brne	.+32     	; 0x5e2 <TOGGLE_PORT+0x4c>
 5c2:	0c c0       	rjmp	.+24     	; 0x5dc <TOGGLE_PORT+0x46>
	{
		case'A':
		case'a':
		PORTA =~PORTA;
 5c4:	8b b3       	in	r24, 0x1b	; 27
 5c6:	80 95       	com	r24
 5c8:	8b bb       	out	0x1b, r24	; 27
		break;
 5ca:	08 95       	ret
		case'B':
		case'b':
		PORTB =~PORTB;
 5cc:	88 b3       	in	r24, 0x18	; 24
 5ce:	80 95       	com	r24
 5d0:	88 bb       	out	0x18, r24	; 24
		break;
 5d2:	08 95       	ret
		case'C':
		case'c':
		PORTC =~PORTC;
 5d4:	85 b3       	in	r24, 0x15	; 21
 5d6:	80 95       	com	r24
 5d8:	85 bb       	out	0x15, r24	; 21
		break;
 5da:	08 95       	ret
		case'D':
		case'd':
		PORTD =~PORTD;
 5dc:	82 b3       	in	r24, 0x12	; 18
 5de:	80 95       	com	r24
 5e0:	82 bb       	out	0x12, r24	; 18
 5e2:	08 95       	ret

000005e4 <led_init>:
#include <avr/io.h>
#include "DIO.h"
#include "LEDD.h"
void led_init(char port, char pin)
{
	DIO_SET_PIN_DIR(port,pin,1);
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	0e 94 96 00 	call	0x12c	; 0x12c <DIO_SET_PIN_DIR>
}
 5ea:	08 95       	ret

000005ec <led_on>:
void led_on(char port,char pin)
{
	DIO_WRITE_PIN(port,pin,1);
 5ec:	41 e0       	ldi	r20, 0x01	; 1
 5ee:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_WRITE_PIN>
}
 5f2:	08 95       	ret

000005f4 <led_off>:
void led_off(char port,char pin)
{
	DIO_WRITE_PIN(port,pin,0);
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	0e 94 27 01 	call	0x24e	; 0x24e <DIO_WRITE_PIN>
}
 5fa:	08 95       	ret

000005fc <led_toggle>:
void led_toggle(char port,char pin)
{
	DIO_TOGGLE_PIN(port,pin);
 5fc:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_TOGGLE_PIN>
}
 600:	08 95       	ret

00000602 <led_read_status>:
char led_read_status(char port,char pin)
{
	return DIO_READ_PIN(port,pin);
 602:	0e 94 05 02 	call	0x40a	; 0x40a <DIO_READ_PIN>
 606:	08 95       	ret

00000608 <_exit>:
 608:	f8 94       	cli

0000060a <__stop_program>:
 60a:	ff cf       	rjmp	.-2      	; 0x60a <__stop_program>
