
LCD app1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000918  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000918  0000098c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  000010f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a80  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ed  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000566  00000000  00000000  00001f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  00002484  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000231  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ac  00000000  00000000  0000283d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 79 04 	call	0x8f2	; 0x8f2 <main>
  8a:	0c 94 8a 04 	jmp	0x914	; 0x914 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SET_PIN_DIR>:
#include "macro.h"


void DIO_SET_PIN_DIR(char port, char pin, char dir)
{
	switch(port)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_SET_PIN_DIR+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_SET_PIN_DIR+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_SET_PIN_DIR+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_SET_PIN_DIR+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_SET_PIN_DIR+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_SET_PIN_DIR+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_SET_PIN_DIR+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_SET_PIN_DIR+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_SET_PIN_DIR+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_SET_PIN_DIR+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_SET_PIN_DIR+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_SET_PIN_DIR+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_SET_PIN_DIR+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_SET_PIN_DIR+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_SET_PIN_DIR+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_SET_PIN_DIR+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_SET_PIN_DIR+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_SET_PIN_DIR+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_SET_PIN_DIR+0xe8>
	{
		case'A':
		case'a':
		if(dir==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_SET_PIN_DIR+0x58>
		{
			SET_BIT(DDRA,pin);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SET_PIN_DIR+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SET_PIN_DIR+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret

        }
		else
		{
			CLR_BIT(DDRA,pin);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SET_PIN_DIR+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SET_PIN_DIR+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(dir==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_SET_PIN_DIR+0x92>
		{
			SET_BIT(DDRB,pin);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SET_PIN_DIR+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SET_PIN_DIR+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRB,pin);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_SET_PIN_DIR+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_SET_PIN_DIR+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
		}
		break;	
		case'C':
		case'c':
		if(dir==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_SET_PIN_DIR+0xcc>
		{
			SET_BIT(DDRC,pin);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SET_PIN_DIR+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SET_PIN_DIR+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRC,pin);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_SET_PIN_DIR+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_SET_PIN_DIR+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(dir==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_SET_PIN_DIR+0x106>
		{
			SET_BIT(DDRD,pin);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SET_PIN_DIR+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SET_PIN_DIR+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

		}
		else
		{
			CLR_BIT(DDRD,pin);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_SET_PIN_DIR+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_SET_PIN_DIR+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_WRITE_PIN>:
		break;
	}
}
void DIO_WRITE_PIN(char port,char pin, char val)
{
	switch(port)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_WRITE_PIN+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_WRITE_PIN+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_WRITE_PIN+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_WRITE_PIN+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_WRITE_PIN+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_WRITE_PIN+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_WRITE_PIN+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_WRITE_PIN+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_WRITE_PIN+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_WRITE_PIN+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_WRITE_PIN+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_WRITE_PIN+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_WRITE_PIN+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_WRITE_PIN+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_WRITE_PIN+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_WRITE_PIN+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_WRITE_PIN+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_WRITE_PIN+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_WRITE_PIN+0xe8>
	{
		case'A':
		case'a':
		if(val==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_WRITE_PIN+0x58>
		{
			SET_BIT(PORTA,pin);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_WRITE_PIN+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_WRITE_PIN+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_WRITE_PIN+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_WRITE_PIN+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;	
			case'B':
			case'b':
			if(val==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_WRITE_PIN+0x92>
			{
				SET_BIT(PORTB,pin);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_WRITE_PIN+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_WRITE_PIN+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,pin);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_WRITE_PIN+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_WRITE_PIN+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
			}
			break;	
			case'C':
			case'c':
			if(val==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_WRITE_PIN+0xcc>
			{
				SET_BIT(PORTC,pin);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_WRITE_PIN+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_WRITE_PIN+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,pin);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_WRITE_PIN+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_WRITE_PIN+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
			}
			break;	
				case'D':
				case'd':
				if(val==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_WRITE_PIN+0x106>
				{
					SET_BIT(PORTD,pin);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_WRITE_PIN+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_WRITE_PIN+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
				}
				else
				{
					CLR_BIT(PORTD,pin);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_WRITE_PIN+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_WRITE_PIN+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_TOGGLE_PIN>:
				break;
	}
}					
void DIO_TOGGLE_PIN(char port,char pin)
{
	switch(port)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_TOGGLE_PIN+0x6>
 2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_TOGGLE_PIN+0x80>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_TOGGLE_PIN+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_TOGGLE_PIN+0x4c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_TOGGLE_PIN+0x66>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_TOGGLE_PIN+0x18>
 2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_TOGGLE_PIN+0x98>
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_TOGGLE_PIN+0x32>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_TOGGLE_PIN+0x4c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_TOGGLE_PIN+0x28>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_TOGGLE_PIN+0x98>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_TOGGLE_PIN+0x32>
 2fe:	83 36       	cpi	r24, 0x63	; 99
 300:	e9 f0       	breq	.+58     	; 0x33c <DIO_TOGGLE_PIN+0x66>
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	a1 f5       	brne	.+104    	; 0x36e <DIO_TOGGLE_PIN+0x98>
 306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_TOGGLE_PIN+0x80>
	{
		case'A':
		case'a':
		TOG_BIT(PORTA,pin);
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_TOGGLE_PIN+0x40>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_TOGGLE_PIN+0x3c>
 31a:	ba 01       	movw	r22, r20
 31c:	62 27       	eor	r22, r18
 31e:	6b bb       	out	0x1b, r22	; 27
		break;
 320:	08 95       	ret
		case'B':
		case'b':
		TOG_BIT(PORTB,pin);
 322:	28 b3       	in	r18, 0x18	; 24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ac 01       	movw	r20, r24
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_TOGGLE_PIN+0x5a>
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_TOGGLE_PIN+0x56>
 334:	ba 01       	movw	r22, r20
 336:	62 27       	eor	r22, r18
 338:	68 bb       	out	0x18, r22	; 24
		break;
 33a:	08 95       	ret
		case'C':
		case'c':
		TOG_BIT(PORTC,pin);
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_TOGGLE_PIN+0x74>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_TOGGLE_PIN+0x70>
 34e:	ba 01       	movw	r22, r20
 350:	62 27       	eor	r22, r18
 352:	65 bb       	out	0x15, r22	; 21
		break;
 354:	08 95       	ret
		case'D':
		case'd':
		TOG_BIT(PORTD,pin);
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	ac 01       	movw	r20, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_TOGGLE_PIN+0x8e>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_TOGGLE_PIN+0x8a>
 368:	ba 01       	movw	r22, r20
 36a:	62 27       	eor	r22, r18
 36c:	62 bb       	out	0x12, r22	; 18
 36e:	08 95       	ret

00000370 <DIO_READ_PIN>:
	}
}
char DIO_READ_PIN(char port,char pin)
{
	unsigned char value;
	switch(port)
 370:	84 34       	cpi	r24, 0x44	; 68
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_READ_PIN+0x6>
 374:	51 c0       	rjmp	.+162    	; 0x418 <DIO_READ_PIN+0xa8>
 376:	85 34       	cpi	r24, 0x45	; 69
 378:	40 f4       	brcc	.+16     	; 0x38a <DIO_READ_PIN+0x1a>
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	39 f1       	breq	.+78     	; 0x3cc <DIO_READ_PIN+0x5c>
 37e:	83 34       	cpi	r24, 0x43	; 67
 380:	c0 f5       	brcc	.+112    	; 0x3f2 <DIO_READ_PIN+0x82>
 382:	81 34       	cpi	r24, 0x41	; 65
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_READ_PIN+0x18>
 386:	5a c0       	rjmp	.+180    	; 0x43c <DIO_READ_PIN+0xcc>
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <DIO_READ_PIN+0x36>
 38a:	82 36       	cpi	r24, 0x62	; 98
 38c:	f9 f0       	breq	.+62     	; 0x3cc <DIO_READ_PIN+0x5c>
 38e:	83 36       	cpi	r24, 0x63	; 99
 390:	20 f4       	brcc	.+8      	; 0x39a <DIO_READ_PIN+0x2a>
 392:	81 36       	cpi	r24, 0x61	; 97
 394:	09 f0       	breq	.+2      	; 0x398 <DIO_READ_PIN+0x28>
 396:	52 c0       	rjmp	.+164    	; 0x43c <DIO_READ_PIN+0xcc>
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <DIO_READ_PIN+0x36>
 39a:	83 36       	cpi	r24, 0x63	; 99
 39c:	51 f1       	breq	.+84     	; 0x3f2 <DIO_READ_PIN+0x82>
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <DIO_READ_PIN+0x34>
 3a2:	4c c0       	rjmp	.+152    	; 0x43c <DIO_READ_PIN+0xcc>
 3a4:	39 c0       	rjmp	.+114    	; 0x418 <DIO_READ_PIN+0xa8>
	{
	case'A':
	case'a':
	value=READ_BIT(PINA,pin);
 3a6:	29 b3       	in	r18, 0x19	; 25
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	06 2e       	mov	r0, r22
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_READ_PIN+0x44>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_READ_PIN+0x40>
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	82 23       	and	r24, r18
 3bc:	93 23       	and	r25, r19
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_READ_PIN+0x54>
 3c0:	95 95       	asr	r25
 3c2:	87 95       	ror	r24
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_READ_PIN+0x50>
 3c8:	98 2f       	mov	r25, r24
	break;
 3ca:	38 c0       	rjmp	.+112    	; 0x43c <DIO_READ_PIN+0xcc>
	case'B':
	case'b':
	value=READ_BIT(PINB,pin);
 3cc:	26 b3       	in	r18, 0x16	; 22
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	06 2e       	mov	r0, r22
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_READ_PIN+0x6a>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_READ_PIN+0x66>
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	82 23       	and	r24, r18
 3e2:	93 23       	and	r25, r19
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_READ_PIN+0x7a>
 3e6:	95 95       	asr	r25
 3e8:	87 95       	ror	r24
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_READ_PIN+0x76>
 3ee:	98 2f       	mov	r25, r24
	break;
 3f0:	25 c0       	rjmp	.+74     	; 0x43c <DIO_READ_PIN+0xcc>
	case'C':
	case'c':
	value=READ_BIT(PINC,pin);
 3f2:	23 b3       	in	r18, 0x13	; 19
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	06 2e       	mov	r0, r22
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_READ_PIN+0x90>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	0a 94       	dec	r0
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_READ_PIN+0x8c>
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	82 23       	and	r24, r18
 408:	93 23       	and	r25, r19
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_READ_PIN+0xa0>
 40c:	95 95       	asr	r25
 40e:	87 95       	ror	r24
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_READ_PIN+0x9c>
 414:	98 2f       	mov	r25, r24
	break;
 416:	12 c0       	rjmp	.+36     	; 0x43c <DIO_READ_PIN+0xcc>
	case'D':
	case'd':
	value=READ_BIT(PIND,pin);
 418:	20 b3       	in	r18, 0x10	; 16
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	06 2e       	mov	r0, r22
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_READ_PIN+0xb6>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_READ_PIN+0xb2>
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	82 23       	and	r24, r18
 42e:	93 23       	and	r25, r19
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_READ_PIN+0xc6>
 432:	95 95       	asr	r25
 434:	87 95       	ror	r24
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_READ_PIN+0xc2>
 43a:	98 2f       	mov	r25, r24
	break;
	}	
	return value;
}	
 43c:	89 2f       	mov	r24, r25
 43e:	08 95       	ret

00000440 <DIO_SET_PORT_DIR>:
void DIO_SET_PORT_DIR(char port,char dir)
{
	switch(port)
 440:	84 34       	cpi	r24, 0x44	; 68
 442:	d9 f0       	breq	.+54     	; 0x47a <DIO_SET_PORT_DIR+0x3a>
 444:	85 34       	cpi	r24, 0x45	; 69
 446:	38 f4       	brcc	.+14     	; 0x456 <DIO_SET_PORT_DIR+0x16>
 448:	82 34       	cpi	r24, 0x42	; 66
 44a:	99 f0       	breq	.+38     	; 0x472 <DIO_SET_PORT_DIR+0x32>
 44c:	83 34       	cpi	r24, 0x43	; 67
 44e:	98 f4       	brcc	.+38     	; 0x476 <DIO_SET_PORT_DIR+0x36>
 450:	81 34       	cpi	r24, 0x41	; 65
 452:	a1 f4       	brne	.+40     	; 0x47c <DIO_SET_PORT_DIR+0x3c>
 454:	0c c0       	rjmp	.+24     	; 0x46e <DIO_SET_PORT_DIR+0x2e>
 456:	82 36       	cpi	r24, 0x62	; 98
 458:	61 f0       	breq	.+24     	; 0x472 <DIO_SET_PORT_DIR+0x32>
 45a:	83 36       	cpi	r24, 0x63	; 99
 45c:	18 f4       	brcc	.+6      	; 0x464 <DIO_SET_PORT_DIR+0x24>
 45e:	81 36       	cpi	r24, 0x61	; 97
 460:	69 f4       	brne	.+26     	; 0x47c <DIO_SET_PORT_DIR+0x3c>
 462:	05 c0       	rjmp	.+10     	; 0x46e <DIO_SET_PORT_DIR+0x2e>
 464:	83 36       	cpi	r24, 0x63	; 99
 466:	39 f0       	breq	.+14     	; 0x476 <DIO_SET_PORT_DIR+0x36>
 468:	84 36       	cpi	r24, 0x64	; 100
 46a:	41 f4       	brne	.+16     	; 0x47c <DIO_SET_PORT_DIR+0x3c>
 46c:	06 c0       	rjmp	.+12     	; 0x47a <DIO_SET_PORT_DIR+0x3a>
	{
	case'A':
	case'a':
	DDRA=dir;
 46e:	6a bb       	out	0x1a, r22	; 26
	break;
 470:	08 95       	ret
	case'B':
	case'b':
	DDRB=dir;
 472:	67 bb       	out	0x17, r22	; 23
	break;
 474:	08 95       	ret
	case'C':
	case'c':
	DDRC=dir;
 476:	64 bb       	out	0x14, r22	; 20
	break;
 478:	08 95       	ret
	case'D':
	case'd':
	DDRD=dir;
 47a:	61 bb       	out	0x11, r22	; 17
 47c:	08 95       	ret

0000047e <DIO_WRITE_PORT>:
	break;
	}	
}
void DIO_WRITE_PORT(char port, char val)
{
	switch(port)
 47e:	84 34       	cpi	r24, 0x44	; 68
 480:	d9 f0       	breq	.+54     	; 0x4b8 <DIO_WRITE_PORT+0x3a>
 482:	85 34       	cpi	r24, 0x45	; 69
 484:	38 f4       	brcc	.+14     	; 0x494 <DIO_WRITE_PORT+0x16>
 486:	82 34       	cpi	r24, 0x42	; 66
 488:	99 f0       	breq	.+38     	; 0x4b0 <DIO_WRITE_PORT+0x32>
 48a:	83 34       	cpi	r24, 0x43	; 67
 48c:	98 f4       	brcc	.+38     	; 0x4b4 <DIO_WRITE_PORT+0x36>
 48e:	81 34       	cpi	r24, 0x41	; 65
 490:	a1 f4       	brne	.+40     	; 0x4ba <DIO_WRITE_PORT+0x3c>
 492:	0c c0       	rjmp	.+24     	; 0x4ac <DIO_WRITE_PORT+0x2e>
 494:	82 36       	cpi	r24, 0x62	; 98
 496:	61 f0       	breq	.+24     	; 0x4b0 <DIO_WRITE_PORT+0x32>
 498:	83 36       	cpi	r24, 0x63	; 99
 49a:	18 f4       	brcc	.+6      	; 0x4a2 <DIO_WRITE_PORT+0x24>
 49c:	81 36       	cpi	r24, 0x61	; 97
 49e:	69 f4       	brne	.+26     	; 0x4ba <DIO_WRITE_PORT+0x3c>
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <DIO_WRITE_PORT+0x2e>
 4a2:	83 36       	cpi	r24, 0x63	; 99
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <DIO_WRITE_PORT+0x36>
 4a6:	84 36       	cpi	r24, 0x64	; 100
 4a8:	41 f4       	brne	.+16     	; 0x4ba <DIO_WRITE_PORT+0x3c>
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <DIO_WRITE_PORT+0x3a>
	{
		case'A':
		case'a':
		PORTA=val;
 4ac:	6b bb       	out	0x1b, r22	; 27
		break;
 4ae:	08 95       	ret
		case'B':
		case'b':
		PORTB=val;
 4b0:	68 bb       	out	0x18, r22	; 24
		break;
 4b2:	08 95       	ret
		case'C':
		case'c':
		PORTC=val;
 4b4:	65 bb       	out	0x15, r22	; 21
		break;
 4b6:	08 95       	ret
		case'D':
		case'd':
		PORTD=val;
 4b8:	62 bb       	out	0x12, r22	; 18
 4ba:	08 95       	ret

000004bc <DIO_READ_PORT>:
	}
}
char DIO_READ_PORT(char port)
{
	unsigned char value;
	switch(port)
 4bc:	84 34       	cpi	r24, 0x44	; 68
 4be:	d9 f0       	breq	.+54     	; 0x4f6 <DIO_READ_PORT+0x3a>
 4c0:	85 34       	cpi	r24, 0x45	; 69
 4c2:	38 f4       	brcc	.+14     	; 0x4d2 <DIO_READ_PORT+0x16>
 4c4:	82 34       	cpi	r24, 0x42	; 66
 4c6:	99 f0       	breq	.+38     	; 0x4ee <DIO_READ_PORT+0x32>
 4c8:	83 34       	cpi	r24, 0x43	; 67
 4ca:	98 f4       	brcc	.+38     	; 0x4f2 <DIO_READ_PORT+0x36>
 4cc:	81 34       	cpi	r24, 0x41	; 65
 4ce:	a1 f4       	brne	.+40     	; 0x4f8 <DIO_READ_PORT+0x3c>
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <DIO_READ_PORT+0x2e>
 4d2:	82 36       	cpi	r24, 0x62	; 98
 4d4:	61 f0       	breq	.+24     	; 0x4ee <DIO_READ_PORT+0x32>
 4d6:	83 36       	cpi	r24, 0x63	; 99
 4d8:	18 f4       	brcc	.+6      	; 0x4e0 <DIO_READ_PORT+0x24>
 4da:	81 36       	cpi	r24, 0x61	; 97
 4dc:	69 f4       	brne	.+26     	; 0x4f8 <DIO_READ_PORT+0x3c>
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <DIO_READ_PORT+0x2e>
 4e0:	83 36       	cpi	r24, 0x63	; 99
 4e2:	39 f0       	breq	.+14     	; 0x4f2 <DIO_READ_PORT+0x36>
 4e4:	84 36       	cpi	r24, 0x64	; 100
 4e6:	41 f4       	brne	.+16     	; 0x4f8 <DIO_READ_PORT+0x3c>
 4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <DIO_READ_PORT+0x3a>
	{
		case'A':
		case'a':
		value=PINA;
 4ea:	99 b3       	in	r25, 0x19	; 25
		break;
 4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <DIO_READ_PORT+0x3c>
		case'B':
		case'b':
		value=PINB;
 4ee:	96 b3       	in	r25, 0x16	; 22
		break;
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <DIO_READ_PORT+0x3c>
		case'C':
		case'c':
		value=PINC;
 4f2:	93 b3       	in	r25, 0x13	; 19
		break;
 4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <DIO_READ_PORT+0x3c>
		case'D':
		case'd':
		value=PIND;
 4f6:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return value;
}
 4f8:	89 2f       	mov	r24, r25
 4fa:	08 95       	ret

000004fc <TOGGLE_PORT>:
void TOGGLE_PORT(char port)
{
	switch(port)
 4fc:	84 34       	cpi	r24, 0x44	; 68
 4fe:	09 f1       	breq	.+66     	; 0x542 <TOGGLE_PORT+0x46>
 500:	85 34       	cpi	r24, 0x45	; 69
 502:	38 f4       	brcc	.+14     	; 0x512 <TOGGLE_PORT+0x16>
 504:	82 34       	cpi	r24, 0x42	; 66
 506:	a9 f0       	breq	.+42     	; 0x532 <TOGGLE_PORT+0x36>
 508:	83 34       	cpi	r24, 0x43	; 67
 50a:	b8 f4       	brcc	.+46     	; 0x53a <TOGGLE_PORT+0x3e>
 50c:	81 34       	cpi	r24, 0x41	; 65
 50e:	e1 f4       	brne	.+56     	; 0x548 <TOGGLE_PORT+0x4c>
 510:	0c c0       	rjmp	.+24     	; 0x52a <TOGGLE_PORT+0x2e>
 512:	82 36       	cpi	r24, 0x62	; 98
 514:	71 f0       	breq	.+28     	; 0x532 <TOGGLE_PORT+0x36>
 516:	83 36       	cpi	r24, 0x63	; 99
 518:	18 f4       	brcc	.+6      	; 0x520 <TOGGLE_PORT+0x24>
 51a:	81 36       	cpi	r24, 0x61	; 97
 51c:	a9 f4       	brne	.+42     	; 0x548 <TOGGLE_PORT+0x4c>
 51e:	05 c0       	rjmp	.+10     	; 0x52a <TOGGLE_PORT+0x2e>
 520:	83 36       	cpi	r24, 0x63	; 99
 522:	59 f0       	breq	.+22     	; 0x53a <TOGGLE_PORT+0x3e>
 524:	84 36       	cpi	r24, 0x64	; 100
 526:	81 f4       	brne	.+32     	; 0x548 <TOGGLE_PORT+0x4c>
 528:	0c c0       	rjmp	.+24     	; 0x542 <TOGGLE_PORT+0x46>
	{
		case'A':
		case'a':
		PORTA =~PORTA;
 52a:	8b b3       	in	r24, 0x1b	; 27
 52c:	80 95       	com	r24
 52e:	8b bb       	out	0x1b, r24	; 27
		break;
 530:	08 95       	ret
		case'B':
		case'b':
		PORTB =~PORTB;
 532:	88 b3       	in	r24, 0x18	; 24
 534:	80 95       	com	r24
 536:	88 bb       	out	0x18, r24	; 24
		break;
 538:	08 95       	ret
		case'C':
		case'c':
		PORTC =~PORTC;
 53a:	85 b3       	in	r24, 0x15	; 21
 53c:	80 95       	com	r24
 53e:	85 bb       	out	0x15, r24	; 21
		break;
 540:	08 95       	ret
		case'D':
		case'd':
		PORTD =~PORTD;
 542:	82 b3       	in	r24, 0x12	; 18
 544:	80 95       	com	r24
 546:	82 bb       	out	0x12, r24	; 18
 548:	08 95       	ret

0000054a <DIO_ENABLE_PULLUP>:
		break;
	}		
}
void DIO_ENABLE_PULLUP(char port,char pin, char enable)
{
	switch(port)
 54a:	84 34       	cpi	r24, 0x44	; 68
 54c:	09 f4       	brne	.+2      	; 0x550 <DIO_ENABLE_PULLUP+0x6>
 54e:	71 c0       	rjmp	.+226    	; 0x632 <DIO_ENABLE_PULLUP+0xe8>
 550:	85 34       	cpi	r24, 0x45	; 69
 552:	48 f4       	brcc	.+18     	; 0x566 <DIO_ENABLE_PULLUP+0x1c>
 554:	82 34       	cpi	r24, 0x42	; 66
 556:	99 f1       	breq	.+102    	; 0x5be <DIO_ENABLE_PULLUP+0x74>
 558:	83 34       	cpi	r24, 0x43	; 67
 55a:	08 f0       	brcs	.+2      	; 0x55e <DIO_ENABLE_PULLUP+0x14>
 55c:	4d c0       	rjmp	.+154    	; 0x5f8 <DIO_ENABLE_PULLUP+0xae>
 55e:	81 34       	cpi	r24, 0x41	; 65
 560:	09 f0       	breq	.+2      	; 0x564 <DIO_ENABLE_PULLUP+0x1a>
 562:	83 c0       	rjmp	.+262    	; 0x66a <DIO_ENABLE_PULLUP+0x120>
 564:	0f c0       	rjmp	.+30     	; 0x584 <DIO_ENABLE_PULLUP+0x3a>
 566:	82 36       	cpi	r24, 0x62	; 98
 568:	51 f1       	breq	.+84     	; 0x5be <DIO_ENABLE_PULLUP+0x74>
 56a:	83 36       	cpi	r24, 0x63	; 99
 56c:	20 f4       	brcc	.+8      	; 0x576 <DIO_ENABLE_PULLUP+0x2c>
 56e:	81 36       	cpi	r24, 0x61	; 97
 570:	09 f0       	breq	.+2      	; 0x574 <DIO_ENABLE_PULLUP+0x2a>
 572:	7b c0       	rjmp	.+246    	; 0x66a <DIO_ENABLE_PULLUP+0x120>
 574:	07 c0       	rjmp	.+14     	; 0x584 <DIO_ENABLE_PULLUP+0x3a>
 576:	83 36       	cpi	r24, 0x63	; 99
 578:	09 f4       	brne	.+2      	; 0x57c <DIO_ENABLE_PULLUP+0x32>
 57a:	3e c0       	rjmp	.+124    	; 0x5f8 <DIO_ENABLE_PULLUP+0xae>
 57c:	84 36       	cpi	r24, 0x64	; 100
 57e:	09 f0       	breq	.+2      	; 0x582 <DIO_ENABLE_PULLUP+0x38>
 580:	74 c0       	rjmp	.+232    	; 0x66a <DIO_ENABLE_PULLUP+0x120>
 582:	57 c0       	rjmp	.+174    	; 0x632 <DIO_ENABLE_PULLUP+0xe8>
	{
		case'A':
		case'a':
		if(enable==1)
 584:	41 30       	cpi	r20, 0x01	; 1
 586:	69 f4       	brne	.+26     	; 0x5a2 <DIO_ENABLE_PULLUP+0x58>
		SET_BIT(PORTA,pin);
 588:	2b b3       	in	r18, 0x1b	; 27
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	ac 01       	movw	r20, r24
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_ENABLE_PULLUP+0x4c>
 592:	44 0f       	add	r20, r20
 594:	55 1f       	adc	r21, r21
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_ENABLE_PULLUP+0x48>
 59a:	ba 01       	movw	r22, r20
 59c:	62 2b       	or	r22, r18
 59e:	6b bb       	out	0x1b, r22	; 27
 5a0:	08 95       	ret
		else
		CLR_BIT(PORTA,pin);
 5a2:	2b b3       	in	r18, 0x1b	; 27
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	ac 01       	movw	r20, r24
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_ENABLE_PULLUP+0x66>
 5ac:	44 0f       	add	r20, r20
 5ae:	55 1f       	adc	r21, r21
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_ENABLE_PULLUP+0x62>
 5b4:	ba 01       	movw	r22, r20
 5b6:	60 95       	com	r22
 5b8:	62 23       	and	r22, r18
 5ba:	6b bb       	out	0x1b, r22	; 27
 5bc:	08 95       	ret
		break;
		case'B':
		case'b':
		if(enable==1)
 5be:	41 30       	cpi	r20, 0x01	; 1
 5c0:	69 f4       	brne	.+26     	; 0x5dc <DIO_ENABLE_PULLUP+0x92>
		SET_BIT(PORTB,pin);
 5c2:	28 b3       	in	r18, 0x18	; 24
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	ac 01       	movw	r20, r24
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_ENABLE_PULLUP+0x86>
 5cc:	44 0f       	add	r20, r20
 5ce:	55 1f       	adc	r21, r21
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_ENABLE_PULLUP+0x82>
 5d4:	ba 01       	movw	r22, r20
 5d6:	62 2b       	or	r22, r18
 5d8:	68 bb       	out	0x18, r22	; 24
 5da:	08 95       	ret
		else
		CLR_BIT(PORTB,pin);
 5dc:	28 b3       	in	r18, 0x18	; 24
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	ac 01       	movw	r20, r24
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_ENABLE_PULLUP+0xa0>
 5e6:	44 0f       	add	r20, r20
 5e8:	55 1f       	adc	r21, r21
 5ea:	6a 95       	dec	r22
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_ENABLE_PULLUP+0x9c>
 5ee:	ba 01       	movw	r22, r20
 5f0:	60 95       	com	r22
 5f2:	62 23       	and	r22, r18
 5f4:	68 bb       	out	0x18, r22	; 24
 5f6:	08 95       	ret
		break;
		case'C':
		case'c':
		if(enable==1)
 5f8:	41 30       	cpi	r20, 0x01	; 1
 5fa:	69 f4       	brne	.+26     	; 0x616 <DIO_ENABLE_PULLUP+0xcc>
		SET_BIT(PORTC,pin);
 5fc:	25 b3       	in	r18, 0x15	; 21
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	ac 01       	movw	r20, r24
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_ENABLE_PULLUP+0xc0>
 606:	44 0f       	add	r20, r20
 608:	55 1f       	adc	r21, r21
 60a:	6a 95       	dec	r22
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_ENABLE_PULLUP+0xbc>
 60e:	ba 01       	movw	r22, r20
 610:	62 2b       	or	r22, r18
 612:	65 bb       	out	0x15, r22	; 21
 614:	08 95       	ret
		else
		CLR_BIT(PORTC,pin);
 616:	25 b3       	in	r18, 0x15	; 21
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	ac 01       	movw	r20, r24
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_ENABLE_PULLUP+0xda>
 620:	44 0f       	add	r20, r20
 622:	55 1f       	adc	r21, r21
 624:	6a 95       	dec	r22
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_ENABLE_PULLUP+0xd6>
 628:	ba 01       	movw	r22, r20
 62a:	60 95       	com	r22
 62c:	62 23       	and	r22, r18
 62e:	65 bb       	out	0x15, r22	; 21
 630:	08 95       	ret
		break;
		case'D':
		case'd':
		if(enable==1)
 632:	41 30       	cpi	r20, 0x01	; 1
 634:	69 f4       	brne	.+26     	; 0x650 <DIO_ENABLE_PULLUP+0x106>
		SET_BIT(PORTD,pin);
 636:	22 b3       	in	r18, 0x12	; 18
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	ac 01       	movw	r20, r24
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_ENABLE_PULLUP+0xfa>
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	6a 95       	dec	r22
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_ENABLE_PULLUP+0xf6>
 648:	ba 01       	movw	r22, r20
 64a:	62 2b       	or	r22, r18
 64c:	62 bb       	out	0x12, r22	; 18
 64e:	08 95       	ret
		else
		CLR_BIT(PORTD,pin);
 650:	22 b3       	in	r18, 0x12	; 18
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	ac 01       	movw	r20, r24
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_ENABLE_PULLUP+0x114>
 65a:	44 0f       	add	r20, r20
 65c:	55 1f       	adc	r21, r21
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_ENABLE_PULLUP+0x110>
 662:	ba 01       	movw	r22, r20
 664:	60 95       	com	r22
 666:	62 23       	and	r22, r18
 668:	62 bb       	out	0x12, r22	; 18
 66a:	08 95       	ret

0000066c <DIO_WRITE_LOW_NIBBLE>:
		break;
	}
}	
	void DIO_WRITE_LOW_NIBBLE(char port, char value)
	{
		value &=0x0f;
 66c:	6f 70       	andi	r22, 0x0F	; 15
		 switch(port)
 66e:	84 34       	cpi	r24, 0x44	; 68
 670:	51 f1       	breq	.+84     	; 0x6c6 <DIO_WRITE_LOW_NIBBLE+0x5a>
 672:	85 34       	cpi	r24, 0x45	; 69
 674:	38 f4       	brcc	.+14     	; 0x684 <DIO_WRITE_LOW_NIBBLE+0x18>
 676:	82 34       	cpi	r24, 0x42	; 66
 678:	c1 f0       	breq	.+48     	; 0x6aa <DIO_WRITE_LOW_NIBBLE+0x3e>
 67a:	83 34       	cpi	r24, 0x43	; 67
 67c:	e8 f4       	brcc	.+58     	; 0x6b8 <DIO_WRITE_LOW_NIBBLE+0x4c>
 67e:	81 34       	cpi	r24, 0x41	; 65
 680:	41 f5       	brne	.+80     	; 0x6d2 <DIO_WRITE_LOW_NIBBLE+0x66>
 682:	0c c0       	rjmp	.+24     	; 0x69c <DIO_WRITE_LOW_NIBBLE+0x30>
 684:	82 36       	cpi	r24, 0x62	; 98
 686:	89 f0       	breq	.+34     	; 0x6aa <DIO_WRITE_LOW_NIBBLE+0x3e>
 688:	83 36       	cpi	r24, 0x63	; 99
 68a:	18 f4       	brcc	.+6      	; 0x692 <DIO_WRITE_LOW_NIBBLE+0x26>
 68c:	81 36       	cpi	r24, 0x61	; 97
 68e:	09 f5       	brne	.+66     	; 0x6d2 <DIO_WRITE_LOW_NIBBLE+0x66>
 690:	05 c0       	rjmp	.+10     	; 0x69c <DIO_WRITE_LOW_NIBBLE+0x30>
 692:	83 36       	cpi	r24, 0x63	; 99
 694:	89 f0       	breq	.+34     	; 0x6b8 <DIO_WRITE_LOW_NIBBLE+0x4c>
 696:	84 36       	cpi	r24, 0x64	; 100
 698:	e1 f4       	brne	.+56     	; 0x6d2 <DIO_WRITE_LOW_NIBBLE+0x66>
 69a:	15 c0       	rjmp	.+42     	; 0x6c6 <DIO_WRITE_LOW_NIBBLE+0x5a>
		 {
			 case'A':
			 case'a':
			 PORTA &=0xf0;
 69c:	8b b3       	in	r24, 0x1b	; 27
 69e:	80 7f       	andi	r24, 0xF0	; 240
 6a0:	8b bb       	out	0x1b, r24	; 27
			 PORTA|=value;
 6a2:	8b b3       	in	r24, 0x1b	; 27
 6a4:	68 2b       	or	r22, r24
 6a6:	6b bb       	out	0x1b, r22	; 27
			 break;
 6a8:	08 95       	ret
			 case'B':
			  case'b':
			  PORTB &=0xf0;
 6aa:	88 b3       	in	r24, 0x18	; 24
 6ac:	80 7f       	andi	r24, 0xF0	; 240
 6ae:	88 bb       	out	0x18, r24	; 24
			  PORTB|=value;
 6b0:	88 b3       	in	r24, 0x18	; 24
 6b2:	68 2b       	or	r22, r24
 6b4:	68 bb       	out	0x18, r22	; 24
			  break;
 6b6:	08 95       	ret
			  case'C':
			  case'c':
			  PORTC &=0xf0;
 6b8:	85 b3       	in	r24, 0x15	; 21
 6ba:	80 7f       	andi	r24, 0xF0	; 240
 6bc:	85 bb       	out	0x15, r24	; 21
			  PORTC|=value;
 6be:	85 b3       	in	r24, 0x15	; 21
 6c0:	68 2b       	or	r22, r24
 6c2:	65 bb       	out	0x15, r22	; 21
			  break;
 6c4:	08 95       	ret
			   case'D':
			   case'd':
			   PORTD &=0xf0;
 6c6:	82 b3       	in	r24, 0x12	; 18
 6c8:	80 7f       	andi	r24, 0xF0	; 240
 6ca:	82 bb       	out	0x12, r24	; 18
			   PORTD|=value;
 6cc:	82 b3       	in	r24, 0x12	; 18
 6ce:	68 2b       	or	r22, r24
 6d0:	62 bb       	out	0x12, r22	; 18
 6d2:	08 95       	ret

000006d4 <DIO_WRITE_HIGH_NIBBLE>:
			 
		 }
	}
	void DIO_WRITE_HIGH_NIBBLE(char port, char value)
	{
		value<<=4;
 6d4:	62 95       	swap	r22
 6d6:	60 7f       	andi	r22, 0xF0	; 240
		switch(port)
 6d8:	84 34       	cpi	r24, 0x44	; 68
 6da:	51 f1       	breq	.+84     	; 0x730 <DIO_WRITE_HIGH_NIBBLE+0x5c>
 6dc:	85 34       	cpi	r24, 0x45	; 69
 6de:	38 f4       	brcc	.+14     	; 0x6ee <DIO_WRITE_HIGH_NIBBLE+0x1a>
 6e0:	82 34       	cpi	r24, 0x42	; 66
 6e2:	c1 f0       	breq	.+48     	; 0x714 <DIO_WRITE_HIGH_NIBBLE+0x40>
 6e4:	83 34       	cpi	r24, 0x43	; 67
 6e6:	e8 f4       	brcc	.+58     	; 0x722 <DIO_WRITE_HIGH_NIBBLE+0x4e>
 6e8:	81 34       	cpi	r24, 0x41	; 65
 6ea:	41 f5       	brne	.+80     	; 0x73c <DIO_WRITE_HIGH_NIBBLE+0x68>
 6ec:	0c c0       	rjmp	.+24     	; 0x706 <DIO_WRITE_HIGH_NIBBLE+0x32>
 6ee:	82 36       	cpi	r24, 0x62	; 98
 6f0:	89 f0       	breq	.+34     	; 0x714 <DIO_WRITE_HIGH_NIBBLE+0x40>
 6f2:	83 36       	cpi	r24, 0x63	; 99
 6f4:	18 f4       	brcc	.+6      	; 0x6fc <DIO_WRITE_HIGH_NIBBLE+0x28>
 6f6:	81 36       	cpi	r24, 0x61	; 97
 6f8:	09 f5       	brne	.+66     	; 0x73c <DIO_WRITE_HIGH_NIBBLE+0x68>
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <DIO_WRITE_HIGH_NIBBLE+0x32>
 6fc:	83 36       	cpi	r24, 0x63	; 99
 6fe:	89 f0       	breq	.+34     	; 0x722 <DIO_WRITE_HIGH_NIBBLE+0x4e>
 700:	84 36       	cpi	r24, 0x64	; 100
 702:	e1 f4       	brne	.+56     	; 0x73c <DIO_WRITE_HIGH_NIBBLE+0x68>
 704:	15 c0       	rjmp	.+42     	; 0x730 <DIO_WRITE_HIGH_NIBBLE+0x5c>
		{
			case'A':
			case'a':
			PORTA &=0x0f;
 706:	8b b3       	in	r24, 0x1b	; 27
 708:	8f 70       	andi	r24, 0x0F	; 15
 70a:	8b bb       	out	0x1b, r24	; 27
			PORTA|=value;
 70c:	8b b3       	in	r24, 0x1b	; 27
 70e:	68 2b       	or	r22, r24
 710:	6b bb       	out	0x1b, r22	; 27
			break;
 712:	08 95       	ret
			case'B':
			case'b':
			PORTB &=0x0f;
 714:	88 b3       	in	r24, 0x18	; 24
 716:	8f 70       	andi	r24, 0x0F	; 15
 718:	88 bb       	out	0x18, r24	; 24
			PORTB|=value;
 71a:	88 b3       	in	r24, 0x18	; 24
 71c:	68 2b       	or	r22, r24
 71e:	68 bb       	out	0x18, r22	; 24
			break;
 720:	08 95       	ret
			case'C':
			case'c':
			PORTC &=0x0f;
 722:	85 b3       	in	r24, 0x15	; 21
 724:	8f 70       	andi	r24, 0x0F	; 15
 726:	85 bb       	out	0x15, r24	; 21
			PORTC|=value;
 728:	85 b3       	in	r24, 0x15	; 21
 72a:	68 2b       	or	r22, r24
 72c:	65 bb       	out	0x15, r22	; 21
			break;
 72e:	08 95       	ret
			case'D':
			case'd':
			PORTD &=0x0f;
 730:	82 b3       	in	r24, 0x12	; 18
 732:	8f 70       	andi	r24, 0x0F	; 15
 734:	82 bb       	out	0x12, r24	; 18
			PORTD|=value;
 736:	82 b3       	in	r24, 0x12	; 18
 738:	68 2b       	or	r22, r24
 73a:	62 bb       	out	0x12, r22	; 18
 73c:	08 95       	ret

0000073e <enable>:
	_delay_ms(1);
	#endif
}
void enable()
{
	DIO_WRITE_PIN('B',EN,1);
 73e:	82 e4       	ldi	r24, 0x42	; 66
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	41 e0       	ldi	r20, 0x01	; 1
 744:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 748:	8f e9       	ldi	r24, 0x9F	; 159
 74a:	9f e0       	ldi	r25, 0x0F	; 15
 74c:	01 97       	sbiw	r24, 0x01	; 1
 74e:	f1 f7       	brne	.-4      	; 0x74c <enable+0xe>
 750:	00 c0       	rjmp	.+0      	; 0x752 <enable+0x14>
 752:	00 00       	nop
	_delay_ms(2);
	DIO_WRITE_PIN('B',EN,0);
 754:	82 e4       	ldi	r24, 0x42	; 66
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	40 e0       	ldi	r20, 0x00	; 0
 75a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
 75e:	8f e9       	ldi	r24, 0x9F	; 159
 760:	9f e0       	ldi	r25, 0x0F	; 15
 762:	01 97       	sbiw	r24, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <enable+0x24>
 766:	00 c0       	rjmp	.+0      	; 0x768 <enable+0x2a>
 768:	00 00       	nop
	_delay_ms(2);
	
}
 76a:	08 95       	ret

0000076c <LCD_SEND_CHAR>:
void LCD_SEND_CHAR(char data)
{
 76c:	cf 93       	push	r28
 76e:	c8 2f       	mov	r28, r24
	#if defined EIGHT_BIT_MODE
	DIO_WRITE_PORT('A',data);
	DIO_WRITE_PIN('B',RS,1);
	enable();
	#elif defined FOUR_BIT_MODE
	DIO_WRITE_HIGH_NIBBLE('A',data>>4);
 770:	68 2f       	mov	r22, r24
 772:	62 95       	swap	r22
 774:	6f 70       	andi	r22, 0x0F	; 15
 776:	81 e4       	ldi	r24, 0x41	; 65
 778:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_WRITE_HIGH_NIBBLE>
	DIO_WRITE_PIN('B',RS,1);
 77c:	82 e4       	ldi	r24, 0x42	; 66
 77e:	61 e0       	ldi	r22, 0x01	; 1
 780:	41 e0       	ldi	r20, 0x01	; 1
 782:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	enable();
 786:	0e 94 9f 03 	call	0x73e	; 0x73e <enable>
	DIO_WRITE_HIGH_NIBBLE('A',data);
 78a:	81 e4       	ldi	r24, 0x41	; 65
 78c:	6c 2f       	mov	r22, r28
 78e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_WRITE_HIGH_NIBBLE>
	enable();
 792:	0e 94 9f 03 	call	0x73e	; 0x73e <enable>
 796:	8f ec       	ldi	r24, 0xCF	; 207
 798:	97 e0       	ldi	r25, 0x07	; 7
 79a:	01 97       	sbiw	r24, 0x01	; 1
 79c:	f1 f7       	brne	.-4      	; 0x79a <LCD_SEND_CHAR+0x2e>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <LCD_SEND_CHAR+0x34>
 7a0:	00 00       	nop
	#endif
	_delay_ms(1);
}
 7a2:	cf 91       	pop	r28
 7a4:	08 95       	ret

000007a6 <LCD_SEND_CMD>:
void LCD_SEND_CMD(char cmd)
{
 7a6:	cf 93       	push	r28
 7a8:	c8 2f       	mov	r28, r24
	DIO_WRITE_PORT('A',cmd);
	DIO_WRITE_PIN('B',RS,0);
	enable();
	#elif defined FOUR_BIT_MODE
	
	DIO_WRITE_HIGH_NIBBLE('A',cmd>>4);
 7aa:	68 2f       	mov	r22, r24
 7ac:	62 95       	swap	r22
 7ae:	6f 70       	andi	r22, 0x0F	; 15
 7b0:	81 e4       	ldi	r24, 0x41	; 65
 7b2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_WRITE_HIGH_NIBBLE>
	DIO_WRITE_PIN('B',RS,0);
 7b6:	82 e4       	ldi	r24, 0x42	; 66
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	40 e0       	ldi	r20, 0x00	; 0
 7bc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	enable();
 7c0:	0e 94 9f 03 	call	0x73e	; 0x73e <enable>
	DIO_WRITE_HIGH_NIBBLE('A',cmd);
 7c4:	81 e4       	ldi	r24, 0x41	; 65
 7c6:	6c 2f       	mov	r22, r28
 7c8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DIO_WRITE_HIGH_NIBBLE>
	DIO_WRITE_PIN('B',RS,0);
 7cc:	82 e4       	ldi	r24, 0x42	; 66
 7ce:	61 e0       	ldi	r22, 0x01	; 1
 7d0:	40 e0       	ldi	r20, 0x00	; 0
 7d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	enable();
 7d6:	0e 94 9f 03 	call	0x73e	; 0x73e <enable>
 7da:	8f ec       	ldi	r24, 0xCF	; 207
 7dc:	97 e0       	ldi	r25, 0x07	; 7
 7de:	01 97       	sbiw	r24, 0x01	; 1
 7e0:	f1 f7       	brne	.-4      	; 0x7de <LCD_SEND_CMD+0x38>
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <LCD_SEND_CMD+0x3e>
 7e4:	00 00       	nop
	#endif
	_delay_ms(1);
	
	
}
 7e6:	cf 91       	pop	r28
 7e8:	08 95       	ret

000007ea <LCD_INIT>:
	LCD_SEND_CMD(CLR_SCREEN);//clear the screen
	_delay_ms(10);
	LCD_SEND_CMD(ENTRY_MODE); //entry mode
	_delay_ms(1);
	#elif defined FOUR_BIT_MODE
	DIO_SET_PIN_DIR('A',4,1);
 7ea:	81 e4       	ldi	r24, 0x41	; 65
 7ec:	64 e0       	ldi	r22, 0x04	; 4
 7ee:	41 e0       	ldi	r20, 0x01	; 1
 7f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',5,1);
 7f4:	81 e4       	ldi	r24, 0x41	; 65
 7f6:	65 e0       	ldi	r22, 0x05	; 5
 7f8:	41 e0       	ldi	r20, 0x01	; 1
 7fa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',6,1);
 7fe:	81 e4       	ldi	r24, 0x41	; 65
 800:	66 e0       	ldi	r22, 0x06	; 6
 802:	41 e0       	ldi	r20, 0x01	; 1
 804:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',7,1);
 808:	81 e4       	ldi	r24, 0x41	; 65
 80a:	67 e0       	ldi	r22, 0x07	; 7
 80c:	41 e0       	ldi	r20, 0x01	; 1
 80e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',EN,1);
 812:	82 e4       	ldi	r24, 0x42	; 66
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	41 e0       	ldi	r20, 0x01	; 1
 818:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',RW,1);
 81c:	82 e4       	ldi	r24, 0x42	; 66
 81e:	62 e0       	ldi	r22, 0x02	; 2
 820:	41 e0       	ldi	r20, 0x01	; 1
 822:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',RS,1);
 826:	82 e4       	ldi	r24, 0x42	; 66
 828:	61 e0       	ldi	r22, 0x01	; 1
 82a:	41 e0       	ldi	r20, 0x01	; 1
 82c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_WRITE_PIN('B',RW,0);
 830:	82 e4       	ldi	r24, 0x42	; 66
 832:	62 e0       	ldi	r22, 0x02	; 2
 834:	40 e0       	ldi	r20, 0x00	; 0
 836:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	LCD_SEND_CMD(RETURN_HOME); //return home
 83a:	82 e0       	ldi	r24, 0x02	; 2
 83c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_SEND_CMD>
 840:	8f e1       	ldi	r24, 0x1F	; 31
 842:	9e e4       	ldi	r25, 0x4E	; 78
 844:	01 97       	sbiw	r24, 0x01	; 1
 846:	f1 f7       	brne	.-4      	; 0x844 <LCD_INIT+0x5a>
 848:	00 c0       	rjmp	.+0      	; 0x84a <LCD_INIT+0x60>
 84a:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD(FOUR_BITS); //4bit mode
 84c:	88 e2       	ldi	r24, 0x28	; 40
 84e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_SEND_CMD>
 852:	8f ec       	ldi	r24, 0xCF	; 207
 854:	97 e0       	ldi	r25, 0x07	; 7
 856:	01 97       	sbiw	r24, 0x01	; 1
 858:	f1 f7       	brne	.-4      	; 0x856 <LCD_INIT+0x6c>
 85a:	00 c0       	rjmp	.+0      	; 0x85c <LCD_INIT+0x72>
 85c:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(CURSOR_ON_DISPLAN_ON);//display on cursor on
 85e:	8e e0       	ldi	r24, 0x0E	; 14
 860:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_SEND_CMD>
 864:	8f ec       	ldi	r24, 0xCF	; 207
 866:	97 e0       	ldi	r25, 0x07	; 7
 868:	01 97       	sbiw	r24, 0x01	; 1
 86a:	f1 f7       	brne	.-4      	; 0x868 <__stack+0x9>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
 86e:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(CLR_SCREEN);//clear the screen
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_SEND_CMD>
 876:	8f e1       	ldi	r24, 0x1F	; 31
 878:	9e e4       	ldi	r25, 0x4E	; 78
 87a:	01 97       	sbiw	r24, 0x01	; 1
 87c:	f1 f7       	brne	.-4      	; 0x87a <__stack+0x1b>
 87e:	00 c0       	rjmp	.+0      	; 0x880 <__stack+0x21>
 880:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD(ENTRY_MODE); //entry mode
 882:	86 e0       	ldi	r24, 0x06	; 6
 884:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_SEND_CMD>
 888:	8f ec       	ldi	r24, 0xCF	; 207
 88a:	97 e0       	ldi	r25, 0x07	; 7
 88c:	01 97       	sbiw	r24, 0x01	; 1
 88e:	f1 f7       	brne	.-4      	; 0x88c <__stack+0x2d>
 890:	00 c0       	rjmp	.+0      	; 0x892 <__stack+0x33>
 892:	00 00       	nop
	_delay_ms(1);
	#endif
}
 894:	08 95       	ret

00000896 <LCD_CLEAR_SCREEN>:
	
	
}
void LCD_CLEAR_SCREEN()
{
	LCD_SEND_CMD(CLR_SCREEN);
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_SEND_CMD>
}
 89c:	08 95       	ret

0000089e <LCD_MOVE_CURSOR>:
void LCD_MOVE_CURSOR(char row,char column)
{
	char data;
	if(row>2||row<0||column>16||column<0)
 89e:	83 30       	cpi	r24, 0x03	; 3
 8a0:	60 f4       	brcc	.+24     	; 0x8ba <LCD_MOVE_CURSOR+0x1c>
 8a2:	61 31       	cpi	r22, 0x11	; 17
 8a4:	60 f4       	brcc	.+24     	; 0x8be <LCD_MOVE_CURSOR+0x20>
	{
		data=SET_ADDRESS_1;
	}
	else if (row==1)
 8a6:	81 30       	cpi	r24, 0x01	; 1
 8a8:	19 f4       	brne	.+6      	; 0x8b0 <LCD_MOVE_CURSOR+0x12>
	{
		data= SET_ADDRESS_1+column-1;
 8aa:	96 2f       	mov	r25, r22
 8ac:	91 58       	subi	r25, 0x81	; 129
 8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <LCD_MOVE_CURSOR+0x22>
	}
	else if(row==2)
 8b0:	82 30       	cpi	r24, 0x02	; 2
 8b2:	31 f4       	brne	.+12     	; 0x8c0 <LCD_MOVE_CURSOR+0x22>
	{
		data=SET_ADDRESS_2+column-1;
 8b4:	96 2f       	mov	r25, r22
 8b6:	91 54       	subi	r25, 0x41	; 65
 8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <LCD_MOVE_CURSOR+0x22>
void LCD_MOVE_CURSOR(char row,char column)
{
	char data;
	if(row>2||row<0||column>16||column<0)
	{
		data=SET_ADDRESS_1;
 8ba:	90 e8       	ldi	r25, 0x80	; 128
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <LCD_MOVE_CURSOR+0x22>
 8be:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if(row==2)
	{
		data=SET_ADDRESS_2+column-1;
	}
	LCD_SEND_CMD(data);
 8c0:	89 2f       	mov	r24, r25
 8c2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LCD_SEND_CMD>
 8c6:	8f ec       	ldi	r24, 0xCF	; 207
 8c8:	97 e0       	ldi	r25, 0x07	; 7
 8ca:	01 97       	sbiw	r24, 0x01	; 1
 8cc:	f1 f7       	brne	.-4      	; 0x8ca <LCD_MOVE_CURSOR+0x2c>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <LCD_MOVE_CURSOR+0x32>
 8d0:	00 00       	nop
	_delay_ms(1);
}
 8d2:	08 95       	ret

000008d4 <LCD_SEND_STRING>:
void LCD_SEND_STRING(char*ptr)
{
 8d4:	cf 93       	push	r28
 8d6:	df 93       	push	r29
 8d8:	ec 01       	movw	r28, r24
	while(*ptr!='\0')
 8da:	88 81       	ld	r24, Y
 8dc:	88 23       	and	r24, r24
 8de:	31 f0       	breq	.+12     	; 0x8ec <LCD_SEND_STRING+0x18>
		data=SET_ADDRESS_2+column-1;
	}
	LCD_SEND_CMD(data);
	_delay_ms(1);
}
void LCD_SEND_STRING(char*ptr)
 8e0:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr!='\0')
	{
		LCD_SEND_CHAR(*ptr);
 8e2:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_SEND_CHAR>
	LCD_SEND_CMD(data);
	_delay_ms(1);
}
void LCD_SEND_STRING(char*ptr)
{
	while(*ptr!='\0')
 8e6:	89 91       	ld	r24, Y+
 8e8:	88 23       	and	r24, r24
 8ea:	d9 f7       	brne	.-10     	; 0x8e2 <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*ptr);
		ptr++;
	}
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	08 95       	ret

000008f2 <main>:
#include <util/delay.h>
#include <avr/io.h>

int main(void)
{
	LCD_INIT();
 8f2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <LCD_INIT>
	LCD_SEND_CHAR('C');
	_delay_ms(1000);
	LCD_SEND_CMD(0x0F);//blink
	//0x0C cursor off
	//0x0E cursor on*/
	LCD_SEND_STRING("mohamed");
 8f6:	80 e6       	ldi	r24, 0x60	; 96
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_SEND_STRING>
	LCD_MOVE_CURSOR(2,1);
 8fe:	82 e0       	ldi	r24, 0x02	; 2
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	61 e0       	ldi	r22, 0x01	; 1
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("osama");
 90a:	88 e6       	ldi	r24, 0x68	; 104
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_SEND_STRING>
 912:	ff cf       	rjmp	.-2      	; 0x912 <main+0x20>

00000914 <_exit>:
 914:	f8 94       	cli

00000916 <__stop_program>:
 916:	ff cf       	rjmp	.-2      	; 0x916 <__stop_program>
